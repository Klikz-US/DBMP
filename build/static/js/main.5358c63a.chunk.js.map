{"version":3,"sources":["assets/logo.png","assets/images/user-register.jpg","services/auth.service.js","actions/auth.action.js","actions/env.action.js","actions/auth-async.action.js","utils/header.util.js","routes/private.route.js","routes/public.route.js","utils/footer.util.js","pages/sections/AdminCardSection2.js","pages/sections/ChartSection1.js","pages/dashboard.page.js","services/pet.service.js","services/search.service.js","utils/form-input.util.js","utils/form-check.util.js","utils/pagination.util.js","pages/pet-list.page.js","pages/pet-edit.page.js","pages/pet-register.page.js","services/owner.service.js","pages/owner-list.page.js","pages/owner-edit.page.js","pages/owner-register.page.js","services/user.service.js","pages/user-list.page.js","pages/user-register.page.js","pages/user-edit.page.js","pages/setting.page.js","pages/report.page.js","pages/login.page.js","routes/router.js","App.js","reducers/auth.reducer.js","reducers/index.js","store.js","serviceWorker.js","index.js","assets/nophoto.png"],"names":["module","exports","axios","defaults","withCredentials","setAuthToken","token","headers","common","verifyTokenService","a","post","window","$server_url","error","response","message","userLoginService","email","password","userLogoutService","verifyTokenStarted","silentAuth","type","payload","userLoginFailure","verifyUserSuccess","expiredAt","user","userLogout","verifyTokenAsync","dispatch","result","includes","status","data","userLogoutAsync","Navigation","auth_obj","useSelector","state","auth","useDispatch","isAdmin","Navbar","collapseOnSelect","expand","bg","variant","className","Container","Brand","to","src","logo","width","height","alt","Toggle","aria-controls","Collapse","id","Nav","DropdownButton","title","Button","size","onClick","PrivateRoute","Component","component","rest","undefined","render","props","isAuthenticated","pathname","from","location","PublicRoute","Row","Col","rel","href","target","AdminCardSection2","xl","md","color","far","icon","aria-valuemax","aria-valuemin","aria-valuenow","role","style","ChartSection1","labels","datasets","label","backgroundColor","borderWidth","options","responsive","maintainAspectRatio","scales","xAxes","barPercentage","gridLines","display","yAxes","ticks","beginAtZero","hoverBackgroundColor","pill","DashboardPage","useEffect","verifyTokenTimer","setTimeout","moment","diff","clearTimeout","name","petGetListService","activePage","get","errMsg","petGetCountService","petDeleteService","microchip","delete","petSearchService","req","ownerSearchService","useFormInput","initialValue","useState","value","setValue","onChange","e","useFormCheck","selected","setSelected","PaginationInternal","createUltimatePagination","WrapperComponent","Pagination","itemTypeToComponent","ITEM_TYPES","PAGE","isActive","Item","data-value","active","ELLIPSIS","Ellipsis","FIRST_PAGE_LINK","First","disabled","PREVIOUS_PAGE_LINK","Prev","NEXT_PAGE_LINK","Next","LAST_PAGE_LINK","Last","AppPagination","bind","event","nodeName","dataset","pageNumber","parseInt","parentNode","this","currentPage","totalPages","PetList","pets","setPets","setActivePage","setTotalPages","pageLoading","setPageLoading","searchCategory","searchValue","hasResult","setHasResult","hasSearchError","setHasSearchError","isSearching","setIsSearching","petList","petCount","fetchData","handleSearch","preventDefault","trim","searchReq","field","searchResult","photoErrorHandle","nophoto","Pet","pet","_id","membership","petName","ownerId","ownerName","Date","registered_at","format","OverlayTrigger","placement","delay","show","hide","overlay","Popover","Title","as","Content","photoPath","onError","cursor","console","log","fetchPetData","handleDelete","Form","Group","Control","pagination","Table","maxWidth","position","css","loading","map","index","key","CountryOptions","sortname","schema","yup","min","max","matches","required","petSpecies","notOneOf","petBreed","petColor","petGender","petBirth","RegisterPet","onClickSubmit","onClickCancel","onPetPhotoUpdate","values","specialNeeds","vetInfo","dateRV","implantedCompany","ownerPhone1","ownerPhone2","ownerPhone3","ownerPhone4","ownerPhone5","ownerPhone6","ownerPhone7","ownerAddress1","ownerAddress2","ownerCity","ownerState","ownerZip","ownerCountry","ownerSecContact","ownerNote","petPhoto","petPhotoPreview","match","params","then","res","petValues","split","setState","catch","err","length","patch","photo_origin_name","petPhotoName","photoData","FormData","append","history","push","csc","getAllCountries","country","files","URL","createObjectURL","enableReinitialize","validationSchema","initialValues","onSubmit","setSubmitting","handleSubmit","handleChange","handleBlur","touched","errors","isSubmitting","noValidate","autoComplete","Card","Header","Body","Label","placeholder","onBlur","isInvalid","isValid","Feedback","Text","toLowerCase","Check","inline","checked","File","custom","Input","data-browse","Image","thumbnail","phone","listAllCountryOptions","ownerGetListService","ownerGetCountService","ownerDeleteService","OwnerList","owners","setOwners","ownerList","ownerCount","Owner","owner","fetchOwnerData","UpdateOwner","goBack","RegisterOwner","userGetListService","userGetService","userRegisterService","userDeleteService","userUpdateService","UserList","userId","username","users","setUsers","deleteError","setDeleteError","User","replace_obj","userList","UserRegister","password_confirm","useHistory","formError","setFormError","img","roundedCircle","newUser","UserEdit","useParams","setUser","pass","pass_confirm","getData","updateUser","Report","AccountLogin","loginLoading","loginError","Img","userLoginAsync","STLRouter","path","exact","Dashboard","PetEdit","PetRegister","OwnerEdit","OwnerRegister","Setting","App","authLoading","initialState","action","appReducer","combineReducers","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","createStore","Boolean","hostname","ReactDOM","store","Store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5358c63a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1b1ab04b.png\";","module.exports = __webpack_public_path__ + \"static/media/user-register.28e15831.jpg\";","import axios from \"axios\";\r\naxios.defaults.withCredentials = true;\r\n\r\n// set token to the axios\r\nexport const setAuthToken = (token) => {\r\n    if (token) {\r\n        axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n    } else {\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n};\r\n\r\n// verify refresh token to generate new access token if refresh token is present\r\nexport const verifyTokenService = async () => {\r\n    try {\r\n        return await axios.post(`${window.$server_url}/verifyToken`);\r\n    } catch (err) {\r\n        return {\r\n            error: true,\r\n            response: err.message,\r\n        };\r\n    }\r\n};\r\n\r\n// user login API to validate the credential\r\nexport const userLoginService = async (email, password) => {\r\n    try {\r\n        return await axios.post(`${window.$server_url}/login`, {\r\n            email,\r\n            password,\r\n        });\r\n    } catch (err) {\r\n        return {\r\n            error: true,\r\n            response: err.message,\r\n        };\r\n    }\r\n};\r\n\r\n// manage user logout\r\nexport const userLogoutService = async () => {\r\n    try {\r\n        return await axios.post(`${window.$server_url}/logout`);\r\n    } catch (err) {\r\n        return {\r\n            error: true,\r\n            response: err.message,\r\n        };\r\n    }\r\n};\r\n","import {\r\n    VERIFY_TOKEN_STARTED, VERIFY_USER_SUCCESS, VERIFY_TOKEN_END, USER_LOGIN_STARTED, USER_LOGIN_FAILURE, USER_LOGOUT\r\n} from \"./env.action\";\r\nimport { setAuthToken } from \"../services/auth.service\";\r\n\r\n// verify token - start\r\nexport const verifyTokenStarted = (silentAuth = false) => {\r\n    return {\r\n        type: VERIFY_TOKEN_STARTED,\r\n        payload: {\r\n            silentAuth\r\n        }\r\n    }\r\n}\r\n\r\n// verify token - end/failure\r\nexport const verifyTokenEnd = () => {\r\n    return {\r\n        type: VERIFY_TOKEN_END\r\n    }\r\n}\r\n\r\n// user login - start\r\nexport const userLoginStarted = () => {\r\n    return {\r\n        type: USER_LOGIN_STARTED\r\n    }\r\n}\r\n\r\n// user login - failure\r\nexport const userLoginFailure = (error = 'Something went wrong. Please try again later.') => {\r\n    return {\r\n        type: USER_LOGIN_FAILURE,\r\n        payload: {\r\n            error\r\n        }\r\n    }\r\n}\r\n\r\n// verify token - success\r\nexport const verifyUserSuccess = ({ token, expiredAt, user }) => {\r\n    return {\r\n        type: VERIFY_USER_SUCCESS,\r\n        payload: {\r\n            token,\r\n            expiredAt,\r\n            user,\r\n        }\r\n    }\r\n}\r\n\r\n// handle user logout\r\nexport const userLogout = () => {\r\n    setAuthToken();\r\n    return {\r\n        type: USER_LOGOUT\r\n    }\r\n}","export const VERIFY_TOKEN_STARTED = 'VERIFY_TOKEN_STARTED';\r\nexport const VERIFY_TOKEN_END = 'VERIFY_TOKEN_END';\r\n\r\nexport const USER_LOGIN_STARTED = 'USER_LOGIN_STARTED';\r\nexport const USER_LOGIN_FAILURE = 'USER_LOGIN_FAILURE';\r\n\r\nexport const VERIFY_USER_SUCCESS = 'VERIFY_USER_SUCCESS';\r\nexport const USER_LOGOUT = 'USER_LOGOUT';","import {\r\n    verifyTokenStarted,\r\n    verifyUserSuccess,\r\n    verifyTokenEnd,\r\n    userLoginStarted,\r\n    userLoginFailure,\r\n    userLogout,\r\n} from \"./auth.action\";\r\n\r\nimport {\r\n    verifyTokenService,\r\n    userLoginService,\r\n    userLogoutService,\r\n} from \"../services/auth.service\";\r\n\r\n// handle verify token\r\nexport const verifyTokenAsync = (silentAuth = false) => async (dispatch) => {\r\n    dispatch(verifyTokenStarted(silentAuth));\r\n\r\n    const result = await verifyTokenService();\r\n\r\n    if (result.error) {\r\n        dispatch(verifyTokenEnd());\r\n        if (result.response && [401, 403].includes(result.response.status))\r\n            dispatch(userLogout());\r\n        return;\r\n    }\r\n\r\n    if (result.status === 204) dispatch(verifyTokenEnd());\r\n    else dispatch(verifyUserSuccess(result.data));\r\n};\r\n\r\n// handle user login\r\nexport const userLoginAsync = (email, password) => async (dispatch) => {\r\n    dispatch(userLoginStarted());\r\n\r\n    const result = await userLoginService(email, password);\r\n\r\n    if (result.error) {\r\n        dispatch(userLoginFailure(result.response));\r\n        return;\r\n    }\r\n\r\n    dispatch(verifyUserSuccess(result.data));\r\n};\r\n\r\n// handle user logout\r\nexport const userLogoutAsync = () => (dispatch) => {\r\n    dispatch(userLogout());\r\n    userLogoutService();\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport { Container, Button } from \"react-bootstrap\";\r\nimport { FiLogOut, FiSettings } from \"react-icons/fi\";\r\n\r\nimport { userLogoutAsync } from \"../actions/auth-async.action\";\r\n\r\nimport logo from \"./../assets/logo.png\";\r\n\r\nexport default function Navigation() {\r\n    const auth_obj = useSelector((state) => state.auth);\r\n    const dispatch = useDispatch();\r\n\r\n    const { isAdmin } = auth_obj.user;\r\n\r\n    const handleLogout = () => {\r\n        dispatch(userLogoutAsync());\r\n    };\r\n\r\n    return (\r\n        <header>\r\n            <Navbar\r\n                collapseOnSelect\r\n                expand=\"lg\"\r\n                bg=\"info\"\r\n                variant=\"dark\"\r\n                className=\"shadow p-0 text-white\"\r\n            >\r\n                <Container>\r\n                    <Navbar.Brand>\r\n                        <Link to=\"/\">\r\n                            <img\r\n                                src={logo}\r\n                                width=\"auto\"\r\n                                height=\"80\"\r\n                                alt=\"STL Portal\"\r\n                            />\r\n                        </Link>\r\n                    </Navbar.Brand>\r\n\r\n                    <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            {isAdmin && (\r\n                                <DropdownButton\r\n                                    variant=\"danger\"\r\n                                    title=\"Administration \"\r\n                                    className=\"mr-4\"\r\n                                >\r\n                                    <Link\r\n                                        to=\"/users\"\r\n                                        className=\"d-block px-3 py-2 text-dark\"\r\n                                    >\r\n                                        Rep Accounts\r\n                                    </Link>\r\n                                    <Link\r\n                                        to=\"/users/add\"\r\n                                        className=\"d-block px-3 py-2 text-dark\"\r\n                                    >\r\n                                        Add New Rep\r\n                                    </Link>\r\n                                </DropdownButton>\r\n                            )}\r\n\r\n                            <DropdownButton\r\n                                variant=\"danger\"\r\n                                title=\"Manage Pets \"\r\n                                className=\"mr-4\"\r\n                            >\r\n                                <Link\r\n                                    to=\"/pets\"\r\n                                    className=\"d-block px-3 py-2 text-dark\"\r\n                                >\r\n                                    All Pets\r\n                                </Link>\r\n                                <Link\r\n                                    to=\"/pets/register\"\r\n                                    className=\"d-block px-3 py-2 text-dark\"\r\n                                >\r\n                                    Add New Pet\r\n                                </Link>\r\n                            </DropdownButton>\r\n\r\n                            <DropdownButton\r\n                                variant=\"danger\"\r\n                                title=\"Manage Owners \"\r\n                                className=\"mr-4\"\r\n                            >\r\n                                <Link\r\n                                    to=\"/owners\"\r\n                                    className=\"d-block px-3 py-2 text-dark\"\r\n                                >\r\n                                    All Owners\r\n                                </Link>\r\n                                <Link\r\n                                    to=\"/owners/register\"\r\n                                    className=\"d-block px-3 py-2 text-dark\"\r\n                                >\r\n                                    Add New Owner\r\n                                </Link>\r\n                            </DropdownButton>\r\n                        </Nav>\r\n\r\n                        <Nav className=\"ml-auto\">\r\n                            <Link to=\"/setting\" className=\"d-block\">\r\n                                <Button className=\"px-2\" variant=\"info\">\r\n                                    <FiSettings\r\n                                        size={24}\r\n                                        className=\"text-white\"\r\n                                    />\r\n                                </Button>\r\n                            </Link>\r\n\r\n                            <Button\r\n                                className=\"px-2\"\r\n                                variant=\"info\"\r\n                                onClick={handleLogout}\r\n                            >\r\n                                <FiLogOut size={24} className=\"text-white\" />\r\n                            </Button>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </header>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nfunction PrivateRoute({ component: Component, ...rest }) {\r\n    if (rest.isAdmin === undefined) {\r\n        return (\r\n            <Route\r\n                {...rest}\r\n                render={(props) => rest.isAuthenticated ? <Component {...props} /> : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />}\r\n            />\r\n        )\r\n    } else {\r\n        return (\r\n            <Route\r\n                {...rest}\r\n                render={(props) => rest.isAuthenticated && rest.isAdmin ? <Component {...props} /> : <Redirect to={{ pathname: '/login', state: { from: props.location } }} />}\r\n            />\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default PrivateRoute;","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\n// handle the public routes\r\nfunction PublicRoute({ component: Component, ...rest }) {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => !rest.isAuthenticated ? <Component {...props} /> : <Redirect to={{ pathname: '/dashboard' }} />}\r\n        />\r\n    )\r\n}\r\n\r\nexport default PublicRoute;","import React from \"react\";\r\n\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\n\r\nimport logo from \"./../assets/logo.png\";\r\n\r\nexport default function Navigation() {\r\n    return (\r\n        <footer className=\"mt-auto pt-5\">\r\n            <div className=\" pt-4 pb-4 bg-light shadow-lg\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col className=\"text-center\">\r\n                            <img\r\n                                src={logo}\r\n                                width=\"60%\"\r\n                                height=\"auto\"\r\n                                alt=\"STL Portal\"\r\n                            />\r\n                        </Col>\r\n\r\n                        <Col className=\"border border-dark border-top-0 border-bottom-0 pb-2 mb-4\">\r\n                            <h5 className=\"text-dark px-2 py-0\">Quick Links</h5>\r\n                            <a\r\n                                rel=\"noopener noreferrer\"\r\n                                className=\"text-info px-2 py-1 d-block\"\r\n                                href=\"https://shop.savethislife.com\"\r\n                                target=\"_blank\"\r\n                            >\r\n                                Save This Life Shopify\r\n                            </a>\r\n                            <a\r\n                                rel=\"noopener noreferrer\"\r\n                                className=\"text-danger px-2 py-1 d-block\"\r\n                                href=\"https://shop.savethislife.com\"\r\n                                target=\"_blank\"\r\n                            >\r\n                                Asana Dashboard\r\n                            </a>\r\n                            <a\r\n                                rel=\"noopener noreferrer\"\r\n                                className=\"text-alert px-2 py-1 d-block\"\r\n                                href=\"https://shop.savethislife.com\"\r\n                                target=\"_blank\"\r\n                            >\r\n                                TalkDesk\r\n                            </a>\r\n                            <a\r\n                                rel=\"noopener noreferrer\"\r\n                                className=\"text-success px-2 py-1 d-block\"\r\n                                href=\"https://shop.savethislife.com\"\r\n                                target=\"_blank\"\r\n                            >\r\n                                CSR Portal\r\n                            </a>\r\n                            <a\r\n                                rel=\"noopener noreferrer\"\r\n                                className=\"text-primary px-2 py-1 d-block\"\r\n                                href=\"https://shop.savethislife.com\"\r\n                                target=\"_blank\"\r\n                            >\r\n                                Resources\r\n                            </a>\r\n                        </Col>\r\n\r\n                        <Col>\r\n                            <h5 className=\"text-dark p-2\">Live Updates</h5>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <p className=\"text-center text-dark m-0\">\r\n                        © 2020 Save This Life Inc. All rights reserved.\r\n                    </p>\r\n                    <p className=\"text-center text-dark m-0\">\r\n                        Save This Life and Save This Life logo are registered\r\n                        trademarks of Save This Life, Inc.\r\n                    </p>\r\n                </Container>\r\n            </div>\r\n        </footer>\r\n    );\r\n}\r\n","import React from \"react\";\nimport { MDBCard, MDBCardBody, MDBIcon, MDBRow, MDBCol } from \"mdbreact\";\n\nconst AdminCardSection2 = () => {\n    return (\n        <MDBRow className=\"mb-4\">\n            <MDBCol xl=\"3\" md=\"6\" className=\"mb-3\">\n                <MDBCard color=\"primary-color\" className=\"classic-admin-card\">\n                    <MDBCardBody>\n                        <div className=\"float-right\">\n                            <MDBIcon far icon=\"money-bill-alt\" />\n                        </div>\n                        <p className=\"white-text\">Sales</p>\n                        <h4>\n                            <strong>$2000</strong>\n                        </h4>\n                    </MDBCardBody>\n                    <div className=\"progress\">\n                        <div\n                            aria-valuemax=\"100\"\n                            aria-valuemin=\"0\"\n                            aria-valuenow=\"25\"\n                            className=\"progress-bar bg grey darken-3\"\n                            role=\"progressbar\"\n                            style={{ width: \"25%\" }}\n                        ></div>\n                    </div>\n                    <MDBCardBody>\n                        <p>Better than last week (25%)</p>\n                    </MDBCardBody>\n                </MDBCard>\n            </MDBCol>\n            <MDBCol xl=\"3\" md=\"6\" className=\"mb-3\">\n                <MDBCard color=\"warning-color\" className=\"classic-admin-card\">\n                    <MDBCardBody>\n                        <div className=\"float-right\">\n                            <MDBIcon icon=\"chart-line\" />\n                        </div>\n                        <p className=\"white-text\">SUBSCRIPTIONS</p>\n                        <h4>\n                            <strong>200</strong>\n                        </h4>\n                    </MDBCardBody>\n                    <div className=\"progress\">\n                        <div\n                            aria-valuemax=\"100\"\n                            aria-valuemin=\"0\"\n                            aria-valuenow=\"25\"\n                            className=\"progress-bar bg grey darken-3\"\n                            role=\"progressbar\"\n                            style={{ width: \"25%\" }}\n                        ></div>\n                    </div>\n                    <MDBCardBody>\n                        <p>Worse than last week (25%)</p>\n                    </MDBCardBody>\n                </MDBCard>\n            </MDBCol>\n            <MDBCol xl=\"3\" md=\"6\" className=\"mb-3\">\n                <MDBCard color=\"primary-color\" className=\"classic-admin-card\">\n                    <MDBCardBody>\n                        <div className=\"float-right\">\n                            <MDBIcon icon=\"chart-pie\" />\n                        </div>\n                        <p className=\"white-text\">TRAFFIC</p>\n                        <h4>\n                            <strong>20000</strong>\n                        </h4>\n                    </MDBCardBody>\n                    <div className=\"progress\">\n                        <div\n                            aria-valuemax=\"100\"\n                            aria-valuemin=\"0\"\n                            aria-valuenow=\"75\"\n                            className=\"progress-bar bg grey darken-3\"\n                            role=\"progressbar\"\n                            style={{ width: \"75%\" }}\n                        ></div>\n                    </div>\n                    <MDBCardBody>\n                        <p>Better than last week (75%)</p>\n                    </MDBCardBody>\n                </MDBCard>\n            </MDBCol>\n            <MDBCol xl=\"3\" md=\"6\" className=\"mb-3\">\n                <MDBCard color=\"red accent-2\" className=\"classic-admin-card\">\n                    <MDBCardBody>\n                        <div className=\"float-right\">\n                            <MDBIcon icon=\"chart-bar\" />\n                        </div>\n                        <p className=\"white-text\">ORGANIC TRAFFIC</p>\n                        <h4>\n                            <strong>2000</strong>\n                        </h4>\n                    </MDBCardBody>\n                    <div className=\"progress\">\n                        <div\n                            aria-valuemax=\"100\"\n                            aria-valuemin=\"0\"\n                            aria-valuenow=\"25\"\n                            className=\"progress-bar bg grey darken-3\"\n                            role=\"progressbar\"\n                            style={{ width: \"25%\" }}\n                        ></div>\n                    </div>\n                    <MDBCardBody>\n                        <p>Better than last week (75%)</p>\n                    </MDBCardBody>\n                </MDBCard>\n            </MDBCol>\n        </MDBRow>\n    );\n};\n\nexport default AdminCardSection2;\n","import React, { Component } from \"react\";\nimport {\n    MDBCol,\n    MDBCard,\n    MDBCardBody,\n    MDBCardHeader,\n    MDBRow,\n    MDBListGroup,\n    MDBListGroupItem,\n    MDBBadge,\n    MDBIcon,\n} from \"mdbreact\";\nimport { Bar, Pie } from \"react-chartjs-2\";\n\nclass ChartSection1 extends Component {\n    render() {\n        const dataBar = {\n            labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\"],\n            datasets: [\n                {\n                    label: \"#1\",\n                    data: [12, 39, 3, 50, 2, 32, 84],\n                    backgroundColor: \"rgba(245, 74, 85, 0.5)\",\n                    borderWidth: 1,\n                },\n                {\n                    label: \"#2\",\n                    data: [56, 24, 5, 16, 45, 24, 8],\n                    backgroundColor: \"rgba(90, 173, 246, 0.5)\",\n                    borderWidth: 1,\n                },\n                {\n                    label: \"#3\",\n                    data: [12, 25, 54, 3, 15, 44, 3],\n                    backgroundColor: \"rgba(245, 192, 50, 0.5)\",\n                    borderWidth: 1,\n                },\n            ],\n        };\n\n        const barChartOptions = {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n                xAxes: [\n                    {\n                        barPercentage: 1,\n                        gridLines: {\n                            display: true,\n                            color: \"rgba(0, 0, 0, 0.1)\",\n                        },\n                    },\n                ],\n                yAxes: [\n                    {\n                        gridLines: {\n                            display: true,\n                            color: \"rgba(0, 0, 0, 0.1)\",\n                        },\n                        ticks: {\n                            beginAtZero: true,\n                        },\n                    },\n                ],\n            },\n        };\n\n        const dataPie = {\n            labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\"],\n            datasets: [\n                {\n                    data: [300, 50, 100, 40, 120, 24, 52],\n                    backgroundColor: [\n                        \"#F7464A\",\n                        \"#46BFBD\",\n                        \"#FDB45C\",\n                        \"#949FB1\",\n                        \"#4D5360\",\n                        \"#ac64ad\",\n                    ],\n                    hoverBackgroundColor: [\n                        \"#FF5A5E\",\n                        \"#5AD3D1\",\n                        \"#FFC870\",\n                        \"#A8B3C5\",\n                        \"#616774\",\n                        \"#da92db\",\n                    ],\n                },\n            ],\n        };\n        return (\n            <MDBRow className=\"mb-4\">\n                <MDBCol md=\"8\" className=\"mb-4\">\n                    <MDBCard className=\"mb-4\">\n                        <MDBCardBody>\n                            <Bar\n                                data={dataBar}\n                                height={500}\n                                options={barChartOptions}\n                            />\n                        </MDBCardBody>\n                    </MDBCard>\n                </MDBCol>\n                <MDBCol md=\"4\" className=\"mb-4\">\n                    <MDBCard className=\"mb-4\">\n                        <MDBCardHeader>Sales chart</MDBCardHeader>\n                        <MDBCardBody>\n                            <Pie\n                                data={dataPie}\n                                height={300}\n                                options={{ responsive: true }}\n                            />\n                        </MDBCardBody>\n                    </MDBCard>\n                    <MDBCard className=\"mb-4\">\n                        <MDBCardBody>\n                            <MDBListGroup className=\"list-group-flush\">\n                                <MDBListGroupItem>\n                                    Sales\n                                    <MDBBadge\n                                        color=\"success-color\"\n                                        pill\n                                        className=\"float-right\"\n                                    >\n                                        22%\n                                        <MDBIcon\n                                            icon=\"arrow-up\"\n                                            className=\"ml-1\"\n                                        />\n                                    </MDBBadge>\n                                </MDBListGroupItem>\n                                <MDBListGroupItem>\n                                    Traffic\n                                    <MDBBadge\n                                        color=\"danger-color\"\n                                        pill\n                                        className=\"float-right\"\n                                    >\n                                        5%\n                                        <MDBIcon\n                                            icon=\"arrow-down\"\n                                            className=\"ml-1\"\n                                        />\n                                    </MDBBadge>\n                                </MDBListGroupItem>\n                                <MDBListGroupItem>\n                                    Orders\n                                    <MDBBadge\n                                        color=\"primary-color\"\n                                        pill\n                                        className=\"float-right\"\n                                    >\n                                        14\n                                    </MDBBadge>\n                                </MDBListGroupItem>\n                                <MDBListGroupItem>\n                                    Issues\n                                    <MDBBadge\n                                        color=\"primary-color\"\n                                        pill\n                                        className=\"float-right\"\n                                    >\n                                        123\n                                    </MDBBadge>\n                                </MDBListGroupItem>\n                                <MDBListGroupItem>\n                                    Messages\n                                    <MDBBadge\n                                        color=\"primary-color\"\n                                        pill\n                                        className=\"float-right\"\n                                    >\n                                        8\n                                    </MDBBadge>\n                                </MDBListGroupItem>\n                            </MDBListGroup>\n                        </MDBCardBody>\n                    </MDBCard>\n                </MDBCol>\n            </MDBRow>\n        );\n    }\n}\n\nexport default ChartSection1;\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\n\r\nimport { verifyTokenAsync } from \"../actions/auth-async.action\";\r\nimport { setAuthToken } from \"../services/auth.service\";\r\n\r\nimport AdminCardSection2 from \"./sections/AdminCardSection2\";\r\nimport ChartSection1 from \"./sections/ChartSection1\";\r\n\r\nconst DashboardPage = () => {\r\n    /*\r\n     * Private Page Token Verification Module.\r\n     */\r\n    const auth_obj = useSelector((state) => state.auth);\r\n    const { token, expiredAt } = auth_obj;\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        setAuthToken(token);\r\n        const verifyTokenTimer = setTimeout(() => {\r\n            dispatch(verifyTokenAsync(true));\r\n        }, moment(expiredAt).diff() - 10 * 1000);\r\n        return () => {\r\n            clearTimeout(verifyTokenTimer);\r\n        };\r\n    }, [expiredAt, token, dispatch]);\r\n    /* ----------------------- */\r\n\r\n    return (\r\n        <Container>\r\n            <h1 className=\"my-5 text-center\">Welcome, {auth_obj.user.name}</h1>\r\n            <AdminCardSection2 />\r\n            <ChartSection1 />\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default DashboardPage;\r\n","import axios from \"axios\";\r\n\r\nexport const petGetListService = async (activePage) => {\r\n    try {\r\n        return await axios.get(`${window.$server_url}/pets/page/${activePage}`);\r\n    } catch (err) {\r\n        return {\r\n            error: true,\r\n            errMsg: err.message,\r\n        };\r\n    }\r\n};\r\n\r\nexport const petGetCountService = async () => {\r\n    try {\r\n        return await axios.get(`${window.$server_url}/pets/count`);\r\n    } catch (err) {\r\n        return {\r\n            error: true,\r\n            errMsg: err.message,\r\n        };\r\n    }\r\n};\r\n\r\nexport const petGetService = async (_id) => {\r\n    try {\r\n        return await axios.get(`${window.$server_url}/pets/${_id}`);\r\n    } catch (err) {\r\n        return {\r\n            error: true,\r\n            errMsg: err.message,\r\n        };\r\n    }\r\n};\r\n\r\nexport const petRegisterService = async (pet) => {\r\n    try {\r\n        return await axios.post(`${window.$server_url}/pets/add`, pet);\r\n    } catch (err) {\r\n        return {\r\n            error: true,\r\n            errMsg: err.message,\r\n        };\r\n    }\r\n};\r\n\r\nexport const petDeleteService = async (microchip) => {\r\n    try {\r\n        return await axios.delete(\r\n            `${window.$server_url}/pets/delete/${microchip}`\r\n        );\r\n    } catch (err) {\r\n        return {\r\n            error: true,\r\n            errMsg: err.message,\r\n        };\r\n    }\r\n};\r\n\r\nexport const petUpdateService = async (id, pet) => {\r\n    try {\r\n        return await axios.patch(\r\n            `${window.$server_url}/pets/update/${id}`,\r\n            pet\r\n        );\r\n    } catch (err) {\r\n        return {\r\n            error: true,\r\n            errMsg: err.message,\r\n        };\r\n    }\r\n};\r\n","import axios from \"axios\";\r\n\r\nexport const petSearchService = async (req) => {\r\n    try {\r\n        return await axios.post(`${window.$server_url}/pets/search`, req);\r\n    } catch (err) {\r\n        return {\r\n            error: true,\r\n            errMsg: err.message,\r\n        };\r\n    }\r\n};\r\n\r\nexport const ownerSearchService = async (req) => {\r\n    try {\r\n        return await axios.post(`${window.$server_url}/owners/search`, req);\r\n    } catch (err) {\r\n        return {\r\n            error: true,\r\n            errMsg: err.message,\r\n        };\r\n    }\r\n};\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport const useFormInput = initialValue => {\r\n    const [value, setValue] = useState('');\r\n\r\n    useEffect(() => {\r\n        setValue(initialValue);\r\n    }, [initialValue, setValue])\r\n\r\n    const handleChange = e => {\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    return {\r\n        value: value,\r\n        onChange: handleChange\r\n    }\r\n}","import { useState, useEffect } from \"react\";\r\n\r\nexport const useFormCheck = initialValue => {\r\n    const [selected, setSelected] = useState('');\r\n\r\n    useEffect(() => {\r\n        setSelected(initialValue);\r\n    }, [initialValue, setSelected])\r\n\r\n    const handleChange = e => {\r\n        setSelected(e.target.value);\r\n    };\r\n\r\n    return {\r\n        selected,\r\n        onChange: handleChange\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport { Pagination } from \"react-bootstrap\";\r\nimport {\r\n    createUltimatePagination,\r\n    ITEM_TYPES,\r\n} from \"react-ultimate-pagination\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst PaginationInternal = createUltimatePagination({\r\n    WrapperComponent: Pagination,\r\n    itemTypeToComponent: {\r\n        [ITEM_TYPES.PAGE]: ({ value, isActive }) => (\r\n            <Pagination.Item data-value={value} active={isActive}>\r\n                {value}\r\n            </Pagination.Item>\r\n        ),\r\n        [ITEM_TYPES.ELLIPSIS]: ({ value, isActive, onClick }) => (\r\n            <Pagination.Ellipsis data-value={value} onClick={onClick} />\r\n        ),\r\n        [ITEM_TYPES.FIRST_PAGE_LINK]: ({ isActive, onClick }) => (\r\n            <Pagination.First\r\n                data-value={1}\r\n                disabled={isActive}\r\n                onClick={onClick}\r\n            />\r\n        ),\r\n        [ITEM_TYPES.PREVIOUS_PAGE_LINK]: ({ value, isActive, onClick }) => (\r\n            <Pagination.Prev\r\n                data-value={value}\r\n                disabled={isActive}\r\n                onClick={onClick}\r\n            />\r\n        ),\r\n        [ITEM_TYPES.NEXT_PAGE_LINK]: ({ value, isActive, onClick }) => (\r\n            <Pagination.Next\r\n                data-value={value}\r\n                disabled={isActive}\r\n                onClick={onClick}\r\n            />\r\n        ),\r\n        [ITEM_TYPES.LAST_PAGE_LINK]: ({ value, isActive, onClick }) => (\r\n            <Pagination.Last\r\n                data-value={value}\r\n                disabled={isActive}\r\n                onClick={onClick}\r\n            />\r\n        ),\r\n    },\r\n});\r\n\r\nexport default class AppPagination extends Component {\r\n    static propTypes = {\r\n        currentPage: PropTypes.number.isRequired,\r\n        totalPages: PropTypes.number.isRequired,\r\n        onChange: PropTypes.func,\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.onClick = this.onClick.bind(this);\r\n    }\r\n\r\n    onClick(event) {\r\n        const a = event.target;\r\n\r\n        if (a.nodeName === \"SPAN\" || a.dataset.value !== undefined) {\r\n            const pageNumber = a.dataset.value\r\n                ? parseInt(a.dataset.value, 10)\r\n                : parseInt(a.parentNode.dataset.value, 10);\r\n\r\n            if (typeof this.props.onChange === \"function\") {\r\n                this.props.onChange(pageNumber);\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { currentPage, totalPages } = this.props;\r\n\r\n        return (\r\n            <PaginationInternal\r\n                className=\"float-right mb-0 mt-2 border border-info shadow p-1\"\r\n                currentPage={currentPage}\r\n                totalPages={totalPages}\r\n                onClick={this.onClick}\r\n            />\r\n        );\r\n    }\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport { Container, Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Popover from \"react-bootstrap/Popover\";\r\nimport { FaSearch, FaTrashAlt } from \"react-icons/fa\";\r\nimport { FcCancel } from \"react-icons/fc\";\r\nimport { MdErrorOutline } from \"react-icons/md\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\n\r\nimport {\r\n    petGetListService,\r\n    petGetCountService,\r\n    petDeleteService,\r\n} from \"./../services/pet.service\";\r\nimport { verifyTokenAsync } from \"../actions/auth-async.action\";\r\nimport { setAuthToken } from \"../services/auth.service\";\r\nimport { petSearchService } from \"../services/search.service\";\r\nimport { useFormInput } from \"../utils/form-input.util\";\r\nimport { useFormCheck } from \"../utils/form-check.util\";\r\nimport Pagination from \"../utils/pagination.util\";\r\nimport nophoto from \"../assets/nophoto.png\";\r\n\r\nexport default function PetList() {\r\n    /*\r\n     * Private Page Token Verification Module.\r\n     */\r\n    const auth_obj = useSelector((state) => state.auth);\r\n    const { token, expiredAt } = auth_obj;\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        setAuthToken(token);\r\n        const verifyTokenTimer = setTimeout(() => {\r\n            dispatch(verifyTokenAsync(true));\r\n        }, moment(expiredAt).diff() - 10 * 1000);\r\n        return () => {\r\n            clearTimeout(verifyTokenTimer);\r\n        };\r\n    }, [expiredAt, token, dispatch]);\r\n    /* ----------------------- */\r\n\r\n    const [pets, setPets] = useState([]);\r\n    const [activePage, setActivePage] = useState(1);\r\n    const [totalPages, setTotalPages] = useState(1);\r\n    const [pageLoading, setPageLoading] = useState(true);\r\n\r\n    const searchCategory = useFormCheck(\"microchip\");\r\n    const searchValue = useFormInput(\"\");\r\n    const [hasResult, setHasResult] = useState(false);\r\n    const [hasSearchError, setHasSearchError] = useState(false);\r\n    const [isSearching, setIsSearching] = useState(false);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const petList = await petGetListService(activePage);\r\n            if (!petList.error) {\r\n                setPets(petList.data);\r\n            }\r\n\r\n            const petCount = await petGetCountService();\r\n            if (!petCount.error) setTotalPages(parseInt(petCount.data / 20));\r\n            setPageLoading(false);\r\n        }\r\n        if (!hasResult) {\r\n            setPageLoading(true);\r\n            fetchData();\r\n        }\r\n    }, [dispatch, activePage, hasResult]);\r\n\r\n    const handleSearch = (e) => {\r\n        if (e) e.preventDefault();\r\n\r\n        if (searchValue.value.trim() !== \"\") {\r\n            async function fetchData() {\r\n                setIsSearching(true);\r\n\r\n                const searchReq = {\r\n                    field: searchCategory.selected,\r\n                    value: searchValue.value.trim(),\r\n                };\r\n\r\n                const searchResult = await petSearchService(searchReq);\r\n                if (searchResult.error) {\r\n                    setHasSearchError(true);\r\n                    setHasResult(false);\r\n                } else {\r\n                    setHasSearchError(false);\r\n                    setHasResult(true);\r\n                    setPets(searchResult.data);\r\n                }\r\n\r\n                setIsSearching(false);\r\n            }\r\n            fetchData();\r\n        }\r\n    };\r\n\r\n    const handleCancel = (e) => {\r\n        e.preventDefault();\r\n\r\n        setHasSearchError(false);\r\n        setHasResult(false);\r\n    };\r\n\r\n    const handleDelete = (_id) => {\r\n        async function fetchData() {\r\n            const result = await petDeleteService(_id);\r\n            if (result.error) {\r\n                console.log(result.errMsg);\r\n            } else {\r\n                async function fetchPetData() {\r\n                    const petList = await petGetListService(activePage);\r\n                    if (!petList.error) {\r\n                        if (hasResult) {\r\n                            handleSearch();\r\n                        } else {\r\n                            setPets(petList.data);\r\n                        }\r\n                    }\r\n\r\n                    const petCount = await petGetCountService();\r\n                    if (!petCount.error)\r\n                        setTotalPages(parseInt(petCount.data / 20));\r\n                }\r\n                fetchPetData();\r\n            }\r\n            setPageLoading(false);\r\n        }\r\n        setPageLoading(true);\r\n        fetchData();\r\n    };\r\n\r\n    const photoErrorHandle = (e) => {\r\n        e.preventDefault();\r\n        e.target.src = nophoto;\r\n    };\r\n\r\n    const pagination = () => {\r\n        async function handleNextPage(activePage) {\r\n            setActivePage(activePage);\r\n        }\r\n\r\n        return (\r\n            <Pagination\r\n                totalPages={totalPages}\r\n                currentPage={activePage}\r\n                onChange={handleNextPage}\r\n            />\r\n        );\r\n    };\r\n\r\n    const renderPhotoPopover = (pet) => {\r\n        return (\r\n            <Popover id={pet.microchip} className=\"shadow\">\r\n                <Popover.Title as=\"h2\" className=\"text-center\">\r\n                    {pet.microchip}\r\n                </Popover.Title>\r\n                <Popover.Content>\r\n                    <img\r\n                        src={pet.photoPath ? pet.photoPath : nophoto}\r\n                        width=\"100%\"\r\n                        height=\"auto\"\r\n                        alt={pet.microchip}\r\n                        onError={photoErrorHandle}\r\n                    />\r\n                </Popover.Content>\r\n            </Popover>\r\n        );\r\n    };\r\n\r\n    const Pet = (props) => (\r\n        <tr style={{ height: \"70px\" }}>\r\n            <td>\r\n                <Link to={\"/pets/edit/\" + props.pet._id}>\r\n                    {props.pet.microchip}\r\n                </Link>\r\n            </td>\r\n            <td className=\"text-uppercase\">{props.pet.membership}</td>\r\n            <td className=\"text-capitalize\">{props.pet.petName}</td>\r\n            <td className=\"text-lowercase\">\r\n                {props.pet.ownerId !== \"\" && (\r\n                    <Link to={\"/owners/edit/\" + props.pet.ownerId}>\r\n                        {props.pet.email}\r\n                    </Link>\r\n                )}\r\n                {props.pet.ownerId === \"\" && <>{props.pet.email}</>}\r\n            </td>\r\n            <td className=\"text-capitalize\">{props.pet.ownerName}</td>\r\n            <td>\r\n                {moment(new Date(props.pet.registered_at)).format(\r\n                    \"MMM DD, YYYY\"\r\n                )}\r\n            </td>\r\n            <td className=\"p-1\">\r\n                <OverlayTrigger\r\n                    placement=\"left\"\r\n                    delay={{ show: 250, hide: 400 }}\r\n                    overlay={renderPhotoPopover(props.pet)}\r\n                >\r\n                    <img\r\n                        src={\r\n                            props.pet.photoPath ? props.pet.photoPath : nophoto\r\n                        }\r\n                        width=\"73\"\r\n                        height=\"73\"\r\n                        alt={props.pet.microchip}\r\n                        onError={photoErrorHandle}\r\n                    />\r\n                </OverlayTrigger>\r\n            </td>\r\n            <td className=\"text-center pt-3\">\r\n                <span\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={() => handleDelete(props.pet._id)}\r\n                >\r\n                    {\" \"}\r\n                    <FaTrashAlt className=\"text-danger mx-1\" />\r\n                </span>\r\n            </td>\r\n        </tr>\r\n    );\r\n\r\n    const petList = (pets) => {\r\n        if (pageLoading) {\r\n            return (\r\n                <tr>\r\n                    <td>\r\n                        <Container\r\n                            className=\"py-5 text-center\"\r\n                            style={{ position: \"absolute\" }}\r\n                        >\r\n                            <ClipLoader\r\n                                css=\"margin: auto;\"\r\n                                size={100}\r\n                                color={\"#ff0000\"}\r\n                                loading={pageLoading}\r\n                            />\r\n                        </Container>\r\n                    </td>\r\n                </tr>\r\n            );\r\n        } else {\r\n            return pets.map(function (pet, index) {\r\n                return <Pet pet={pet} key={index} />;\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h1 className=\"m-5 text-center\">Registerd Pets</h1>\r\n\r\n                <Row className=\"mt-4\">\r\n                    <Col>\r\n                        <Form>\r\n                            <Form.Group as={Row}>\r\n                                <Col md=\"4\" className=\"pl-0 my-auto\">\r\n                                    <Form.Control\r\n                                        as=\"select\"\r\n                                        className=\"text-capitalize\"\r\n                                        {...searchCategory}\r\n                                    >\r\n                                        <option value=\"microchip\">\r\n                                            Microchip\r\n                                        </option>\r\n                                        <option value=\"email\">\r\n                                            Owner Email\r\n                                        </option>\r\n                                        <option value=\"petName\">\r\n                                            Pet Name\r\n                                        </option>\r\n                                        <option value=\"ownerName\">\r\n                                            Owner Name\r\n                                        </option>\r\n                                    </Form.Control>\r\n                                </Col>\r\n\r\n                                <Col md=\"5\" className=\"pl-0 my-auto\">\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        {...searchValue}\r\n                                    />\r\n                                </Col>\r\n\r\n                                <Col md=\"3\" className=\"pl-0\">\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        variant=\"outline-info\"\r\n                                        className=\"float-left px-2\"\r\n                                        disabled={isSearching}\r\n                                        onClick={handleSearch}\r\n                                    >\r\n                                        <FaSearch className=\"text-danger mx-1\" />\r\n                                    </Button>\r\n                                    <Button\r\n                                        variant=\"outline-danger\"\r\n                                        className=\"float-left px-2\"\r\n                                        disabled={isSearching}\r\n                                        onClick={handleCancel}\r\n                                    >\r\n                                        <FcCancel className=\"text-info mx-1\" />\r\n                                    </Button>\r\n                                </Col>\r\n                            </Form.Group>\r\n                        </Form>\r\n                    </Col>\r\n                    <Col className=\"px-0\">\r\n                        {totalPages > 1 &&\r\n                            !hasResult &&\r\n                            !hasSearchError &&\r\n                            pagination()}\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Table responsive>\r\n                        <thead className=\"bg-danger text-white\">\r\n                            <tr>\r\n                                <th style={{ width: \"14%\", maxWidth: \"14%\" }}>\r\n                                    Microchip\r\n                                </th>\r\n                                <th style={{ width: \"11%\", maxWidth: \"11%\" }}>\r\n                                    Membership\r\n                                </th>\r\n                                <th style={{ width: \"14%\", maxWidth: \"14%\" }}>\r\n                                    Pet Name\r\n                                </th>\r\n                                <th style={{ width: \"20%\", maxWidth: \"20%\" }}>\r\n                                    Owner Email\r\n                                </th>\r\n                                <th style={{ width: \"20%\", maxWidth: \"20%\" }}>\r\n                                    Owner Name\r\n                                </th>\r\n                                <th style={{ width: \"13%\", maxWidth: \"13%\" }}>\r\n                                    Registered At\r\n                                </th>\r\n                                <th style={{ width: \"4%\", maxWidth: \"4%\" }}>\r\n                                    Photo\r\n                                </th>\r\n                                <th style={{ width: \"4%\", maxWidth: \"4%\" }}>\r\n                                    Action\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        {!hasSearchError && <tbody>{petList(pets)}</tbody>}\r\n                    </Table>\r\n                </Row>\r\n\r\n                {hasSearchError && (\r\n                    <Row className=\"justify-content-md-center my-5\">\r\n                        <MdErrorOutline\r\n                            className=\"text-warning mr-1\"\r\n                            size={24}\r\n                        />\r\n                        No Pet Found\r\n                    </Row>\r\n                )}\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Formik } from \"formik\";\r\nimport \"@availity/yup\";\r\nimport * as yup from \"yup\";\r\nimport csc from \"country-state-city\";\r\nimport { Container, Row, Col, Form, Button, Card } from \"react-bootstrap\";\r\nimport Image from \"react-bootstrap/Image\";\r\n\r\nimport nophoto from \"../assets/nophoto.png\";\r\n\r\nconst CountryOptions = (props) => (\r\n    <option value={props.sortname}>{props.name}</option>\r\n);\r\n\r\nconst microchipRegExp = /(^991\\d{12}$|^990164\\d{9}$|^\\d{9}$|^[a-zA-Z0-9]{10}$)/;\r\n\r\nconst schema = yup.object({\r\n    microchip: yup\r\n        .string()\r\n        .min(9, \"Microchip must be at least 9 characters\")\r\n        .max(15, \"Microchip must be at most 15 characters\")\r\n        .matches(\r\n            microchipRegExp,\r\n            \"Invalid microchip number. Enter only the 9, 10 or 15 character microchip number, with no punctuation or spaces.\"\r\n        )\r\n        .required(\"Microchip is a required field\"),\r\n    petName: yup.string().required(\"Pet Name is a required field\"),\r\n    petSpecies: yup\r\n        .string()\r\n        .notOneOf([\"Choose One\"])\r\n        .required(\"Select Species\"),\r\n    petBreed: yup.string().required(\"Breed is a required field\"),\r\n    petColor: yup.string().required(\"Color is a required field\"),\r\n    petGender: yup.string().required(\"Please select one\"),\r\n    petBirth: yup.date().required(\"Birthdate is a required field\"),\r\n    email: yup\r\n        .string()\r\n        .email(\"Invalid email address\")\r\n        .required(\"Email is a required field\"),\r\n});\r\n\r\nexport default class RegisterPet extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onClickSubmit = this.onClickSubmit.bind(this);\r\n        this.onClickCancel = this.onClickCancel.bind(this);\r\n        this.onPetPhotoUpdate = this.onPetPhotoUpdate.bind(this);\r\n        this.photoErrorHandle = this.photoErrorHandle.bind(this);\r\n\r\n        this.state = {\r\n            values: {\r\n                microchip: \"\",\r\n                petName: \"\",\r\n                petSpecies: \"\",\r\n                petBreed: \"\",\r\n                petColor: \"\",\r\n                petGender: \"male\",\r\n                petBirth: \"\",\r\n                specialNeeds: \"\",\r\n                vetInfo: \"\",\r\n                dateRV: \"\",\r\n                implantedCompany: \"\",\r\n                email: \"\",\r\n                ownerName: \"\",\r\n                ownerPhone1: \"\",\r\n                ownerPhone2: \"\",\r\n                ownerPhone3: \"\",\r\n                ownerPhone4: \"\",\r\n                ownerPhone5: \"\",\r\n                ownerPhone6: \"\",\r\n                ownerPhone7: \"\",\r\n                ownerAddress1: \"\",\r\n                ownerAddress2: \"\",\r\n                ownerCity: \"\",\r\n                ownerState: \"\",\r\n                ownerZip: \"\",\r\n                ownerCountry: \"US\",\r\n                ownerSecContact: \"\",\r\n                ownerNote: \"\",\r\n                membership: \"platinum\",\r\n            },\r\n\r\n            petPhoto: undefined,\r\n            petPhotoPreview: undefined,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios\r\n            .get(window.$server_url + \"/pets/\" + this.props.match.params.id)\r\n            .then((res) => {\r\n                let petValues = res.data;\r\n\r\n                if (\r\n                    petValues.petBirth === null ||\r\n                    petValues.petBirth === undefined\r\n                ) {\r\n                    petValues.petBirth = \"\";\r\n                } else {\r\n                    petValues.petBirth = petValues.petBirth.split(\"T\")[0];\r\n                }\r\n\r\n                if (\r\n                    petValues.dateRV === null ||\r\n                    petValues.dateRV === undefined\r\n                ) {\r\n                    petValues.dateRV = \"\";\r\n                } else {\r\n                    petValues.dateRV = petValues.dateRV.split(\"T\")[0];\r\n                }\r\n\r\n                this.setState({\r\n                    values: petValues,\r\n                });\r\n\r\n                axios\r\n                    .get(window.$server_url + \"/photos/\" + petValues.microchip)\r\n                    .then((res) => {\r\n                        this.setState({\r\n                            petPhotoPreview:\r\n                                res.data === \"\" ? nophoto : res.data,\r\n                        });\r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err);\r\n                    });\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    photoErrorHandle = (e) => {\r\n        e.preventDefault();\r\n        e.target.src = nophoto;\r\n    };\r\n\r\n    onClickSubmit(values) {\r\n        let photoPath = \"\";\r\n        if (this.state.petPhoto !== undefined) {\r\n            photoPath =\r\n                \"/uploads/photo/\" +\r\n                values.microchip +\r\n                \".\" +\r\n                this.state.petPhoto.name.split(\".\")[\r\n                    this.state.petPhoto.name.split(\".\").length - 1\r\n                ];\r\n        }\r\n\r\n        // Update Pet\r\n        axios\r\n            .patch(\r\n                window.$server_url + \"/pets/edit/\" + this.props.match.params.id,\r\n                {\r\n                    ...values,\r\n                    ...{ photoPath: photoPath },\r\n                }\r\n            )\r\n            .then((res) => {\r\n                if (this.state.petPhoto !== undefined) {\r\n                    // Upload Pet's Photo\r\n                    let photo_origin_name = this.state.petPhoto.name;\r\n                    let petPhotoName =\r\n                        values.microchip +\r\n                        \".\" +\r\n                        photo_origin_name.split(\".\")[\r\n                            photo_origin_name.split(\".\").length - 1\r\n                        ];\r\n\r\n                    const photoData = new FormData();\r\n                    photoData.append(\"petMicrochip\", values.microchip);\r\n                    photoData.append(\"petPhotoName\", petPhotoName);\r\n                    photoData.append(\"petPhotoData\", this.state.petPhoto);\r\n\r\n                    axios\r\n                        .post(window.$server_url + \"/photos/add\", photoData)\r\n                        .then((res) => {\r\n                            this.props.history.push(\"/pets\");\r\n                        })\r\n                        .catch((err) => {\r\n                            console.log(err);\r\n                        });\r\n                } else {\r\n                    this.props.history.push(\"/pets\");\r\n                }\r\n            });\r\n    }\r\n\r\n    onClickCancel(e) {\r\n        e.preventDefault();\r\n\r\n        this.props.history.push(\"/pets\");\r\n    }\r\n\r\n    listAllCountryOptions() {\r\n        return csc.getAllCountries().map(function (country, index) {\r\n            return (\r\n                <CountryOptions\r\n                    name={country.name}\r\n                    sortname={country.sortname}\r\n                    key={index}\r\n                ></CountryOptions>\r\n            );\r\n        });\r\n    }\r\n\r\n    onPetPhotoUpdate(e) {\r\n        e.preventDefault();\r\n\r\n        this.setState({\r\n            petPhoto: e.target.files[0],\r\n            petPhotoPreview: URL.createObjectURL(e.target.files[0]),\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Container>\r\n                    <h1 className=\"m-5 text-center\">Update Pet</h1>\r\n                </Container>\r\n\r\n                <Formik\r\n                    enableReinitialize={true}\r\n                    validationSchema={schema}\r\n                    initialValues={{\r\n                        microchip: this.state.values.microchip,\r\n                        petName: this.state.values.petName,\r\n                        petSpecies: this.state.values.petSpecies,\r\n                        petBreed: this.state.values.petBreed,\r\n                        petColor: this.state.values.petColor,\r\n                        petGender: this.state.values.petGender,\r\n                        petBirth: this.state.values.petBirth,\r\n                        specialNeeds: this.state.values.specialNeeds,\r\n                        vetInfo: this.state.values.vetInfo,\r\n                        dateRV: this.state.values.dateRV,\r\n                        implantedCompany: this.state.values.implantedCompany,\r\n                        email: this.state.values.email,\r\n                        membership: this.state.values.membership,\r\n                    }}\r\n                    onSubmit={(values, { setSubmitting }) => {\r\n                        setTimeout(() => {\r\n                            this.onClickSubmit(values);\r\n                            setSubmitting(false);\r\n                        }, 400);\r\n                    }}\r\n                >\r\n                    {({\r\n                        values,\r\n                        handleSubmit,\r\n                        handleChange,\r\n                        handleBlur,\r\n                        touched,\r\n                        errors,\r\n                        isSubmitting,\r\n                    }) => (\r\n                        <Form\r\n                            noValidate\r\n                            onSubmit={handleSubmit}\r\n                            autoComplete=\"off\"\r\n                        >\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Card className=\"h-100 shadow\">\r\n                                            <Card.Header className=\"bg-danger text-white\">\r\n                                                <h5 className=\"m-0\">\r\n                                                    Pet Information\r\n                                                </h5>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                <Form.Group as={Row}>\r\n                                                    <Col>\r\n                                                        <Form.Label>\r\n                                                            Microchip Number\r\n                                                        </Form.Label>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"microchip\"\r\n                                                            placeholder=\"Microchip Number\"\r\n                                                            value={\r\n                                                                values.microchip\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.microchip &&\r\n                                                                !!errors.microchip\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.microchip &&\r\n                                                                !errors.microchip\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.microchip}\r\n                                                        </Form.Control.Feedback>\r\n                                                        <Form.Text className=\"text-muted\">\r\n                                                            Do not include the\r\n                                                            microchip type code\r\n                                                            or manufacturer's\r\n                                                            name or\r\n                                                            abbreviation.\r\n                                                        </Form.Text>\r\n                                                    </Col>\r\n\r\n                                                    <Col>\r\n                                                        <Form.Label>\r\n                                                            Email Address\r\n                                                        </Form.Label>\r\n                                                        <Form.Control\r\n                                                            type=\"email\"\r\n                                                            name=\"email\"\r\n                                                            placeholder=\"Owner's Email Address\"\r\n                                                            value={values.email}\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.email &&\r\n                                                                !!errors.email\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.email &&\r\n                                                                !errors.email\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.email}\r\n                                                        </Form.Control.Feedback>\r\n                                                        <Form.Text className=\"text-muted\">\r\n                                                            Never share this\r\n                                                            email with anyone\r\n                                                            else.\r\n                                                        </Form.Text>\r\n                                                    </Col>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group as={Row}>\r\n                                                    <Col>\r\n                                                        <Form.Label>\r\n                                                            Name\r\n                                                        </Form.Label>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"petName\"\r\n                                                            placeholder=\"Pet's Name\"\r\n                                                            value={\r\n                                                                values.petName\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.petName &&\r\n                                                                !!errors.petName\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.petName &&\r\n                                                                !errors.petName\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.petName}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Col>\r\n\r\n                                                    <Col>\r\n                                                        <Form.Label>\r\n                                                            Species\r\n                                                        </Form.Label>\r\n                                                        <Form.Control\r\n                                                            className=\"text-capitalize\"\r\n                                                            as=\"select\"\r\n                                                            name=\"petSpecies\"\r\n                                                            value={values.petSpecies.toLowerCase()}\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.petSpecies &&\r\n                                                                !!errors.petSpecies\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.petSpecies &&\r\n                                                                !errors.petSpecies\r\n                                                            }\r\n                                                        >\r\n                                                            <option className=\"text-capitalize\">\r\n                                                                choose one\r\n                                                            </option>\r\n                                                            <option className=\"text-capitalize\">\r\n                                                                dog\r\n                                                            </option>\r\n                                                            <option className=\"text-capitalize\">\r\n                                                                cat\r\n                                                            </option>\r\n                                                            <option className=\"text-capitalize\">\r\n                                                                bird\r\n                                                            </option>\r\n                                                            <option className=\"text-capitalize\">\r\n                                                                ferret\r\n                                                            </option>\r\n                                                            <option className=\"text-capitalize\">\r\n                                                                goat\r\n                                                            </option>\r\n                                                            <option className=\"text-capitalize\">\r\n                                                                horse\r\n                                                            </option>\r\n                                                            <option className=\"text-capitalize\">\r\n                                                                pig\r\n                                                            </option>\r\n                                                            <option className=\"text-capitalize\">\r\n                                                                rabbit\r\n                                                            </option>\r\n                                                            <option className=\"text-capitalize\">\r\n                                                                snake\r\n                                                            </option>\r\n                                                        </Form.Control>\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.petSpecies}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Col>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group as={Row}>\r\n                                                    <Col>\r\n                                                        <Form.Label>\r\n                                                            Breed\r\n                                                        </Form.Label>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"petBreed\"\r\n                                                            placeholder=\"Pet's Breed\"\r\n                                                            value={\r\n                                                                values.petBreed\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.petBreed &&\r\n                                                                !!errors.petBreed\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.petBreed &&\r\n                                                                !errors.petBreed\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.petBreed}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Col>\r\n\r\n                                                    <Col>\r\n                                                        <Form.Label>\r\n                                                            Color\r\n                                                        </Form.Label>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"petColor\"\r\n                                                            placeholder=\"Pet's Color\"\r\n                                                            value={\r\n                                                                values.petColor\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.petColor &&\r\n                                                                !!errors.petColor\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.petColor &&\r\n                                                                !errors.petColor\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.petColor}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Col>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group as={Row}>\r\n                                                    <Col>\r\n                                                        <Form.Label>\r\n                                                            Gender\r\n                                                        </Form.Label>\r\n                                                        <Col className=\"p-0\">\r\n                                                            <Form.Check\r\n                                                                className=\"mr-4\"\r\n                                                                inline\r\n                                                                type=\"radio\"\r\n                                                                label=\"Male\"\r\n                                                                name=\"petGender\"\r\n                                                                value=\"male\"\r\n                                                                checked={\r\n                                                                    values.petGender.toLowerCase() ===\r\n                                                                    \"male\"\r\n                                                                }\r\n                                                                onChange={\r\n                                                                    handleChange\r\n                                                                }\r\n                                                                onBlur={\r\n                                                                    handleBlur\r\n                                                                }\r\n                                                                isInvalid={\r\n                                                                    touched.petGender &&\r\n                                                                    !!errors.petGender\r\n                                                                }\r\n                                                                isValid={\r\n                                                                    touched.petGender &&\r\n                                                                    !errors.petGender\r\n                                                                }\r\n                                                            />\r\n                                                            <Form.Check\r\n                                                                className=\"mr-4\"\r\n                                                                inline\r\n                                                                type=\"radio\"\r\n                                                                label=\"Female\"\r\n                                                                name=\"petGender\"\r\n                                                                value=\"female\"\r\n                                                                checked={\r\n                                                                    values.petGender.toLowerCase() ===\r\n                                                                    \"female\"\r\n                                                                }\r\n                                                                onChange={\r\n                                                                    handleChange\r\n                                                                }\r\n                                                                onBlur={\r\n                                                                    handleBlur\r\n                                                                }\r\n                                                                isInvalid={\r\n                                                                    touched.petGender &&\r\n                                                                    !!errors.petGender\r\n                                                                }\r\n                                                                isValid={\r\n                                                                    touched.petGender &&\r\n                                                                    !errors.petGender\r\n                                                                }\r\n                                                            />\r\n                                                            <Form.Check\r\n                                                                className=\"mr-4\"\r\n                                                                inline\r\n                                                                type=\"radio\"\r\n                                                                label=\"Other\"\r\n                                                                name=\"petGender\"\r\n                                                                value=\"other\"\r\n                                                                checked={\r\n                                                                    values.petGender.toLowerCase() ===\r\n                                                                    \"other\"\r\n                                                                }\r\n                                                                onChange={\r\n                                                                    handleChange\r\n                                                                }\r\n                                                                onBlur={\r\n                                                                    handleBlur\r\n                                                                }\r\n                                                                isInvalid={\r\n                                                                    touched.petGender &&\r\n                                                                    !!errors.petGender\r\n                                                                }\r\n                                                                isValid={\r\n                                                                    touched.petGender &&\r\n                                                                    !errors.petGender\r\n                                                                }\r\n                                                            />\r\n                                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                                {\r\n                                                                    errors.petGender\r\n                                                                }\r\n                                                            </Form.Control.Feedback>\r\n                                                        </Col>\r\n                                                    </Col>\r\n\r\n                                                    <Col>\r\n                                                        <Form.Label>\r\n                                                            Birthdate\r\n                                                        </Form.Label>\r\n                                                        <Form.Control\r\n                                                            type=\"date\"\r\n                                                            name=\"petBirth\"\r\n                                                            value={\r\n                                                                values.petBirth\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.petBirth &&\r\n                                                                !!errors.petBirth\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.petBirth &&\r\n                                                                !errors.petBirth\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.petBirth}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Col>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group as={Row}>\r\n                                                    <Col>\r\n                                                        <Form.Label>\r\n                                                            Pet's Photo\r\n                                                        </Form.Label>\r\n                                                        <Form.File custom>\r\n                                                            <Form.File.Input\r\n                                                                name=\"petPhoto\"\r\n                                                                onChange={\r\n                                                                    this\r\n                                                                        .onPetPhotoUpdate\r\n                                                                }\r\n                                                            />\r\n                                                            <Form.File.Label data-browse=\"Upload\">\r\n                                                                Max. 512mb.\r\n                                                                Type: .jpg /\r\n                                                                .jpeg / .png /\r\n                                                                .gif\r\n                                                            </Form.File.Label>\r\n                                                        </Form.File>\r\n                                                        <Image\r\n                                                            src={\r\n                                                                this.state\r\n                                                                    .petPhotoPreview\r\n                                                            }\r\n                                                            width=\"100%\"\r\n                                                            height=\"auto\"\r\n                                                            thumbnail\r\n                                                            onError={\r\n                                                                this\r\n                                                                    .photoErrorHandle\r\n                                                            }\r\n                                                        />\r\n                                                    </Col>\r\n\r\n                                                    <Col>\r\n                                                        <Form.Group>\r\n                                                            <Form.Label>\r\n                                                                Any Special\r\n                                                                Needs or\r\n                                                                Medications\r\n                                                            </Form.Label>\r\n                                                            <Form.Control\r\n                                                                as=\"textarea\"\r\n                                                                name=\"specialNeeds\"\r\n                                                                value={\r\n                                                                    values.specialNeeds\r\n                                                                }\r\n                                                                onChange={\r\n                                                                    handleChange\r\n                                                                }\r\n                                                            />\r\n                                                        </Form.Group>\r\n                                                        <Form.Group>\r\n                                                            <Form.Label>\r\n                                                                Veterinary\r\n                                                                Information\r\n                                                            </Form.Label>\r\n                                                            <Form.Control\r\n                                                                as=\"textarea\"\r\n                                                                name=\"vetInfo\"\r\n                                                                value={\r\n                                                                    values.vetInfo\r\n                                                                }\r\n                                                                onChange={\r\n                                                                    handleChange\r\n                                                                }\r\n                                                            />\r\n                                                        </Form.Group>\r\n\r\n                                                        <Form.Group>\r\n                                                            <Form.Label>\r\n                                                                Date of Rabies\r\n                                                                Vaccination\r\n                                                            </Form.Label>\r\n                                                            <Form.Control\r\n                                                                type=\"date\"\r\n                                                                name=\"dateRV\"\r\n                                                                value={\r\n                                                                    values.dateRV\r\n                                                                }\r\n                                                                onChange={\r\n                                                                    handleChange\r\n                                                                }\r\n                                                            />\r\n                                                        </Form.Group>\r\n\r\n                                                        <Form.Group>\r\n                                                            <Form.Label>\r\n                                                                Veterinary\r\n                                                                Hospital or\r\n                                                                Clinic where\r\n                                                                Microchip was\r\n                                                                registered.\r\n                                                            </Form.Label>\r\n                                                            <Form.Control\r\n                                                                type=\"text\"\r\n                                                                name=\"implantedCompany\"\r\n                                                                placeholder=\"Veterinary Hospital or Clinic\"\r\n                                                                value={\r\n                                                                    values.implantedCompany\r\n                                                                }\r\n                                                                onChange={\r\n                                                                    handleChange\r\n                                                                }\r\n                                                            />\r\n                                                            <Form.Text className=\"text-muted\">\r\n                                                                Please Type Full\r\n                                                                Name as it\r\n                                                                appears. i.e.\r\n                                                                \"ZEPPY's Pet\r\n                                                                Hospital\"\r\n                                                            </Form.Text>\r\n                                                        </Form.Group>\r\n                                                    </Col>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group as={Row}>\r\n                                                    <Col></Col>\r\n\r\n                                                    <Col></Col>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group as={Row}>\r\n                                                    <Col></Col>\r\n\r\n                                                    <Col></Col>\r\n                                                </Form.Group>\r\n                                            </Card.Body>\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row className=\"mt-5\">\r\n                                    <Col>\r\n                                        <Form.Group className=\"p-3 mb-0 shadow\">\r\n                                            <Row>\r\n                                                <Col className=\"text-center\">\r\n                                                    <Form.Label className=\"mb-0\">\r\n                                                        Select Membership Type\r\n                                                    </Form.Label>\r\n                                                </Col>\r\n\r\n                                                <Col className=\"p-0\">\r\n                                                    <Form.Check\r\n                                                        className=\"mr-4\"\r\n                                                        inline\r\n                                                        type=\"radio\"\r\n                                                        label=\"Platinum\"\r\n                                                        name=\"membership\"\r\n                                                        value=\"platinum\"\r\n                                                        checked={\r\n                                                            values.membership ===\r\n                                                            \"platinum\"\r\n                                                        }\r\n                                                        onChange={handleChange}\r\n                                                    />\r\n\r\n                                                    <Form.Check\r\n                                                        className=\"mr-4\"\r\n                                                        inline\r\n                                                        type=\"radio\"\r\n                                                        label=\"Diamond\"\r\n                                                        name=\"membership\"\r\n                                                        value=\"diamond\"\r\n                                                        checked={\r\n                                                            values.membership ===\r\n                                                            \"diamond\"\r\n                                                        }\r\n                                                        onChange={handleChange}\r\n                                                    />\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n\r\n                                    <Col>\r\n                                        <Button\r\n                                            className=\"float-right\"\r\n                                            variant=\"outline-secondary\"\r\n                                            onClick={this.onClickCancel}\r\n                                        >\r\n                                            Cancel\r\n                                        </Button>\r\n\r\n                                        <Button\r\n                                            className=\"float-right mr-2\"\r\n                                            variant=\"primary\"\r\n                                            type=\"submit\"\r\n                                            disabled={isSubmitting}\r\n                                        >\r\n                                            Update Pet\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Formik } from \"formik\";\r\nimport \"@availity/yup\";\r\nimport * as yup from \"yup\";\r\nimport csc from \"country-state-city\";\r\nimport { Container, Row, Col, Form, Button, Card } from \"react-bootstrap\";\r\nimport Image from \"react-bootstrap/Image\";\r\n\r\nconst CountryOptions = (props) => (\r\n    <option value={props.sortname}>{props.name}</option>\r\n);\r\n\r\nconst microchipRegExp = /(^991\\d{12}$|^990164\\d{9}$|^\\d{9}$|^[a-zA-Z0-9]{10}$)/;\r\nconst zipcodeRegExp = /^\\d{5}(?:[-\\s]\\d{4})?$/;\r\n\r\nconst schema = yup.object({\r\n    microchip: yup\r\n        .string()\r\n        .min(9, \"Microchip must be at least 9 characters\")\r\n        .max(15, \"Microchip must be at most 15 characters\")\r\n        .matches(\r\n            microchipRegExp,\r\n            \"Invalid microchip number. Enter only the 9, 10 or 15 character microchip number, with no punctuation or spaces.\"\r\n        )\r\n        .required(\"Microchip is a required field\"),\r\n    petName: yup.string().required(\"Pet Name is a required field\"),\r\n    petSpecies: yup\r\n        .string()\r\n        .notOneOf([\"Choose One\"])\r\n        .required(\"Select Species\"),\r\n    petBreed: yup.string().required(\"Breed is a required field\"),\r\n    petColor: yup.string().required(\"Color is a required field\"),\r\n    petGender: yup.string().required(\"Please select one\"),\r\n    petBirth: yup.date().required(\"Birthdate is a required field\"),\r\n    email: yup\r\n        .string()\r\n        .email(\"Invalid email address\")\r\n        .required(\"Email is a required field\"),\r\n    ownerName: yup.string().required(\"Owner Name is a required field\"),\r\n    ownerPhone1: yup\r\n        .string()\r\n        .phone(\"Phone number is not valid\")\r\n        .required(\"Phone is a required field\"),\r\n    ownerPhone2: yup.string().phone(\"Phone number is not valid\"),\r\n    ownerPhone3: yup.string().phone(\"Phone number is not valid\"),\r\n    ownerPhone4: yup.string().phone(\"Phone number is not valid\"),\r\n    ownerPhone5: yup.string().phone(\"Phone number is not valid\"),\r\n    ownerPhone6: yup.string().phone(\"Phone number is not valid\"),\r\n    ownerPhone7: yup.string().phone(\"Phone number is not valid\"),\r\n    ownerAddress1: yup.string().required(\"Address is a required field\"),\r\n    ownerCity: yup.string().required(\"City is a required field\"),\r\n    ownerState: yup.string().required(\"State is a required field\"),\r\n    ownerZip: yup\r\n        .string()\r\n        .matches(zipcodeRegExp, \"Invalid Zip Code.\")\r\n        .required(\"Zipcode is a required field\"),\r\n});\r\n\r\nexport default class RegisterPet extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onClickSubmit = this.onClickSubmit.bind(this);\r\n        this.onClickCancel = this.onClickCancel.bind(this);\r\n        this.onPetPhotoUpdate = this.onPetPhotoUpdate.bind(this);\r\n\r\n        this.state = {\r\n            petPhoto: undefined,\r\n            petPhotoPreview: undefined,\r\n            error: \"\",\r\n        };\r\n    }\r\n\r\n    onClickSubmit(values) {\r\n        let photoPath = \"\";\r\n        if (this.state.petPhoto !== undefined) {\r\n            photoPath =\r\n                \"/uploads/photo/\" +\r\n                values.microchip +\r\n                \".\" +\r\n                this.state.petPhoto.name.split(\".\")[\r\n                    this.state.petPhoto.name.split(\".\").length - 1\r\n                ];\r\n        }\r\n\r\n        // Register Pet\r\n        axios\r\n            .post(window.$server_url + \"/pets/register\", {\r\n                ...values,\r\n                ...{ photoPath: photoPath },\r\n            })\r\n            .then((res) => {\r\n                if (this.state.petPhoto !== undefined) {\r\n                    // Upload Pet's Photo\r\n                    let photo_origin_name = this.state.petPhoto.name;\r\n                    let petPhotoName =\r\n                        values.microchip +\r\n                        \".\" +\r\n                        photo_origin_name.split(\".\")[\r\n                            photo_origin_name.split(\".\").length - 1\r\n                        ];\r\n\r\n                    const photoData = new FormData();\r\n                    photoData.append(\"petMicrochip\", values.microchip);\r\n                    photoData.append(\"petPhotoName\", petPhotoName);\r\n                    photoData.append(\"petPhotoData\", this.state.petPhoto);\r\n\r\n                    axios\r\n                        .post(window.$server_url + \"/photos/add\", photoData)\r\n                        .then((res) => {\r\n                            this.props.history.push(\"/pets\");\r\n                        })\r\n                        .catch((err) => {\r\n                            console.log(err);\r\n                        });\r\n                } else {\r\n                    this.props.history.push(\"/pets\");\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                this.setState({\r\n                    error: err.response.data,\r\n                });\r\n            });\r\n    }\r\n\r\n    onClickCancel(e) {\r\n        e.preventDefault();\r\n        this.props.history.push(\"/pets\");\r\n    }\r\n\r\n    listAllCountryOptions() {\r\n        return csc.getAllCountries().map(function (country, index) {\r\n            return (\r\n                <CountryOptions\r\n                    name={country.name}\r\n                    sortname={country.sortname}\r\n                    key={index}\r\n                ></CountryOptions>\r\n            );\r\n        });\r\n    }\r\n\r\n    onPetPhotoUpdate(e) {\r\n        e.preventDefault();\r\n\r\n        if (e.target.files[0]) {\r\n            this.setState({\r\n                petPhoto: e.target.files[0],\r\n                petPhotoPreview: URL.createObjectURL(e.target.files[0]),\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Container>\r\n                    <h1 className=\"m-5 text-center\">Register New Pet</h1>\r\n                </Container>\r\n\r\n                <Formik\r\n                    validationSchema={schema}\r\n                    initialValues={{\r\n                        microchip: \"\",\r\n                        petName: \"\",\r\n                        petSpecies: \"\",\r\n                        petBreed: \"\",\r\n                        petColor: \"\",\r\n                        petGender: \"\",\r\n                        petBirth: \"\",\r\n                        specialNeeds: \"\",\r\n                        vetInfo: \"\",\r\n                        dateRV: \"\",\r\n                        implantedCompany: \"\",\r\n                        email: \"\",\r\n                        ownerName: \"\",\r\n                        ownerPhone1: \"\",\r\n                        ownerPhone2: \"\",\r\n                        ownerPhone3: \"\",\r\n                        ownerPhone4: \"\",\r\n                        ownerPhone5: \"\",\r\n                        ownerPhone6: \"\",\r\n                        ownerPhone7: \"\",\r\n                        ownerAddress1: \"\",\r\n                        ownerAddress2: \"\",\r\n                        ownerCity: \"\",\r\n                        ownerState: \"\",\r\n                        ownerZip: \"\",\r\n                        ownerCountry: \"US\",\r\n                        ownerSecContact: \"\",\r\n                        ownerNote: \"\",\r\n                        membership: \"platinum\",\r\n                    }}\r\n                    onSubmit={(values, { setSubmitting }) => {\r\n                        setTimeout(() => {\r\n                            this.onClickSubmit(values);\r\n                            setSubmitting(false);\r\n                        }, 400);\r\n                    }}\r\n                >\r\n                    {({\r\n                        values,\r\n                        handleSubmit,\r\n                        handleChange,\r\n                        handleBlur,\r\n                        touched,\r\n                        errors,\r\n                        isSubmitting,\r\n                    }) => (\r\n                        <Form\r\n                            noValidate\r\n                            onSubmit={handleSubmit}\r\n                            autoComplete=\"off\"\r\n                        >\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Card className=\"h-100 shadow\">\r\n                                            <Card.Header className=\"bg-danger text-white\">\r\n                                                <h5 className=\"m-0\">\r\n                                                    Pet Information\r\n                                                </h5>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                <Form.Group>\r\n                                                    <Form.Label>\r\n                                                        Microchip Number\r\n                                                    </Form.Label>\r\n                                                    <Form.Control\r\n                                                        type=\"text\"\r\n                                                        name=\"microchip\"\r\n                                                        placeholder=\"Microchip Number\"\r\n                                                        value={values.microchip}\r\n                                                        onChange={handleChange}\r\n                                                        onBlur={handleBlur}\r\n                                                        isInvalid={\r\n                                                            touched.microchip &&\r\n                                                            !!errors.microchip\r\n                                                        }\r\n                                                        isValid={\r\n                                                            touched.microchip &&\r\n                                                            !errors.microchip\r\n                                                        }\r\n                                                    />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {errors.microchip}\r\n                                                    </Form.Control.Feedback>\r\n                                                    <Form.Text className=\"text-muted\">\r\n                                                        Do not include the\r\n                                                        microchip type code or\r\n                                                        manufacturer's name or\r\n                                                        abbreviation.\r\n                                                    </Form.Text>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group>\r\n                                                    <Form.Label>\r\n                                                        Name\r\n                                                    </Form.Label>\r\n                                                    <Form.Control\r\n                                                        type=\"text\"\r\n                                                        name=\"petName\"\r\n                                                        placeholder=\"Pet's Name\"\r\n                                                        value={values.petName}\r\n                                                        onChange={handleChange}\r\n                                                        onBlur={handleBlur}\r\n                                                        isInvalid={\r\n                                                            touched.petName &&\r\n                                                            !!errors.petName\r\n                                                        }\r\n                                                        isValid={\r\n                                                            touched.petName &&\r\n                                                            !errors.petName\r\n                                                        }\r\n                                                    />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {errors.petName}\r\n                                                    </Form.Control.Feedback>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group>\r\n                                                    <Form.Label>\r\n                                                        Species\r\n                                                    </Form.Label>\r\n                                                    <Form.Control\r\n                                                        as=\"select\"\r\n                                                        name=\"petSpecies\"\r\n                                                        value={\r\n                                                            values.petSpecies\r\n                                                        }\r\n                                                        onChange={handleChange}\r\n                                                        onBlur={handleBlur}\r\n                                                        isInvalid={\r\n                                                            touched.petSpecies &&\r\n                                                            !!errors.petSpecies\r\n                                                        }\r\n                                                        isValid={\r\n                                                            touched.petSpecies &&\r\n                                                            !errors.petSpecies\r\n                                                        }\r\n                                                    >\r\n                                                        <option>\r\n                                                            Choose One\r\n                                                        </option>\r\n                                                        <option>Dog</option>\r\n                                                        <option>Cat</option>\r\n                                                        <option>Bird</option>\r\n                                                        <option>Ferret</option>\r\n                                                        <option>Goat</option>\r\n                                                        <option>Horse</option>\r\n                                                        <option>Pig</option>\r\n                                                        <option>Rabbit</option>\r\n                                                        <option>Snake</option>\r\n                                                    </Form.Control>\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {errors.petSpecies}\r\n                                                    </Form.Control.Feedback>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group>\r\n                                                    <Form.Label>\r\n                                                        Breed\r\n                                                    </Form.Label>\r\n                                                    <Form.Control\r\n                                                        type=\"text\"\r\n                                                        name=\"petBreed\"\r\n                                                        placeholder=\"Pet's Breed\"\r\n                                                        value={values.petBreed}\r\n                                                        onChange={handleChange}\r\n                                                        onBlur={handleBlur}\r\n                                                        isInvalid={\r\n                                                            touched.petBreed &&\r\n                                                            !!errors.petBreed\r\n                                                        }\r\n                                                        isValid={\r\n                                                            touched.petBreed &&\r\n                                                            !errors.petBreed\r\n                                                        }\r\n                                                    />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {errors.petBreed}\r\n                                                    </Form.Control.Feedback>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group>\r\n                                                    <Form.Label>\r\n                                                        Color\r\n                                                    </Form.Label>\r\n                                                    <Form.Control\r\n                                                        type=\"text\"\r\n                                                        name=\"petColor\"\r\n                                                        placeholder=\"Pet's Color\"\r\n                                                        value={values.petColor}\r\n                                                        onChange={handleChange}\r\n                                                        onBlur={handleBlur}\r\n                                                        isInvalid={\r\n                                                            touched.petColor &&\r\n                                                            !!errors.petColor\r\n                                                        }\r\n                                                        isValid={\r\n                                                            touched.petColor &&\r\n                                                            !errors.petColor\r\n                                                        }\r\n                                                    />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {errors.petColor}\r\n                                                    </Form.Control.Feedback>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group>\r\n                                                    <Form.Label>\r\n                                                        Gender\r\n                                                    </Form.Label>\r\n                                                    <Col className=\"p-0\">\r\n                                                        <Form.Check\r\n                                                            className=\"mr-4\"\r\n                                                            inline\r\n                                                            type=\"radio\"\r\n                                                            label=\"Male\"\r\n                                                            name=\"petGender\"\r\n                                                            value=\"male\"\r\n                                                            checked={\r\n                                                                values.petGender ===\r\n                                                                \"male\"\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.petGender &&\r\n                                                                !!errors.petGender\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.petGender &&\r\n                                                                !errors.petGender\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Check\r\n                                                            className=\"mr-4\"\r\n                                                            inline\r\n                                                            type=\"radio\"\r\n                                                            label=\"Female\"\r\n                                                            name=\"petGender\"\r\n                                                            value=\"female\"\r\n                                                            checked={\r\n                                                                values.petGender ===\r\n                                                                \"female\"\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.petGender &&\r\n                                                                !!errors.petGender\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.petGender &&\r\n                                                                !errors.petGender\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Check\r\n                                                            className=\"mr-4\"\r\n                                                            inline\r\n                                                            type=\"radio\"\r\n                                                            label=\"Other\"\r\n                                                            name=\"petGender\"\r\n                                                            value=\"other\"\r\n                                                            checked={\r\n                                                                values.petGender ===\r\n                                                                \"other\"\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.petGender &&\r\n                                                                !!errors.petGender\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.petGender &&\r\n                                                                !errors.petGender\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.petGender}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Col>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group>\r\n                                                    <Form.Label>\r\n                                                        Birthdate\r\n                                                    </Form.Label>\r\n                                                    <Form.Control\r\n                                                        type=\"date\"\r\n                                                        name=\"petBirth\"\r\n                                                        value={values.petBirth}\r\n                                                        onChange={handleChange}\r\n                                                        onBlur={handleBlur}\r\n                                                        isInvalid={\r\n                                                            touched.petBirth &&\r\n                                                            !!errors.petBirth\r\n                                                        }\r\n                                                        isValid={\r\n                                                            touched.petBirth &&\r\n                                                            !errors.petBirth\r\n                                                        }\r\n                                                    />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {errors.petBirth}\r\n                                                    </Form.Control.Feedback>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group>\r\n                                                    <Form.Label>\r\n                                                        Any Special Needs or\r\n                                                        Medications\r\n                                                    </Form.Label>\r\n                                                    <Form.Control\r\n                                                        as=\"textarea\"\r\n                                                        name=\"specialNeeds\"\r\n                                                        value={\r\n                                                            values.specialNeeds\r\n                                                        }\r\n                                                        onChange={handleChange}\r\n                                                    />\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group>\r\n                                                    <Form.Label>\r\n                                                        Veterinary Information\r\n                                                    </Form.Label>\r\n                                                    <Form.Control\r\n                                                        as=\"textarea\"\r\n                                                        name=\"vetInfo\"\r\n                                                        value={values.vetInfo}\r\n                                                        onChange={handleChange}\r\n                                                    />\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group>\r\n                                                    <Form.Label>\r\n                                                        Date of Rabies\r\n                                                        Vaccination\r\n                                                    </Form.Label>\r\n                                                    <Form.Control\r\n                                                        type=\"date\"\r\n                                                        name=\"dateRV\"\r\n                                                        value={values.dateRV}\r\n                                                        onChange={handleChange}\r\n                                                    />\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group>\r\n                                                    <Form.Label>\r\n                                                        Veterinary Hospital or\r\n                                                        Clinic where Microchip\r\n                                                        was registered.\r\n                                                    </Form.Label>\r\n                                                    <Form.Control\r\n                                                        type=\"text\"\r\n                                                        name=\"implantedCompany\"\r\n                                                        placeholder=\"Veterinary Hospital or Clinic\"\r\n                                                        value={\r\n                                                            values.implantedCompany\r\n                                                        }\r\n                                                        onChange={handleChange}\r\n                                                    />\r\n                                                    <Form.Text className=\"text-muted\">\r\n                                                        Please Type Full Name as\r\n                                                        it appears. i.e.\r\n                                                        \"ZEPPY's Pet Hospital\"\r\n                                                    </Form.Text>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group>\r\n                                                    <Form.Label>\r\n                                                        Pet's Photo\r\n                                                    </Form.Label>\r\n                                                    <Form.File custom>\r\n                                                        <Form.File.Input\r\n                                                            name=\"petPhoto\"\r\n                                                            onChange={\r\n                                                                this\r\n                                                                    .onPetPhotoUpdate\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.File.Label data-browse=\"Upload\">\r\n                                                            Max. 512mb. Type:\r\n                                                            .jpg / .jpeg / .png\r\n                                                            / .gif\r\n                                                        </Form.File.Label>\r\n                                                    </Form.File>\r\n                                                </Form.Group>\r\n\r\n                                                <Image\r\n                                                    src={\r\n                                                        this.state\r\n                                                            .petPhotoPreview\r\n                                                    }\r\n                                                    width=\"100%\"\r\n                                                    height=\"auto\"\r\n                                                    thumbnail\r\n                                                />\r\n                                            </Card.Body>\r\n                                        </Card>\r\n                                    </Col>\r\n\r\n                                    <Col>\r\n                                        <Card className=\"h-100 shadow\">\r\n                                            <Card.Header className=\"bg-success text-white\">\r\n                                                <h5 className=\"m-0\">\r\n                                                    Owner Information\r\n                                                </h5>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                <Form.Group>\r\n                                                    <Form.Label>\r\n                                                        Email Address\r\n                                                    </Form.Label>\r\n                                                    <Form.Control\r\n                                                        type=\"email\"\r\n                                                        name=\"email\"\r\n                                                        placeholder=\"Owner's Email Address\"\r\n                                                        value={values.email}\r\n                                                        onChange={handleChange}\r\n                                                        onBlur={handleBlur}\r\n                                                        isInvalid={\r\n                                                            touched.email &&\r\n                                                            !!errors.email\r\n                                                        }\r\n                                                        isValid={\r\n                                                            touched.email &&\r\n                                                            !errors.email\r\n                                                        }\r\n                                                    />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {errors.email}\r\n                                                    </Form.Control.Feedback>\r\n                                                    <Form.Text className=\"text-muted\">\r\n                                                        We'll never share your\r\n                                                        email with anyone else.\r\n                                                    </Form.Text>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group>\r\n                                                    <Form.Label>\r\n                                                        Name\r\n                                                    </Form.Label>\r\n                                                    <Form.Control\r\n                                                        type=\"text\"\r\n                                                        name=\"ownerName\"\r\n                                                        placeholder=\"Owner's Full Name\"\r\n                                                        value={values.ownerName}\r\n                                                        onChange={handleChange}\r\n                                                        onBlur={handleBlur}\r\n                                                        isInvalid={\r\n                                                            touched.ownerName &&\r\n                                                            !!errors.ownerName\r\n                                                        }\r\n                                                        isValid={\r\n                                                            touched.ownerName &&\r\n                                                            !errors.ownerName\r\n                                                        }\r\n                                                    />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {errors.ownerName}\r\n                                                    </Form.Control.Feedback>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group>\r\n                                                    <Form.Label>\r\n                                                        Phone\r\n                                                    </Form.Label>\r\n                                                    <Form.Control\r\n                                                        type=\"phone\"\r\n                                                        name=\"ownerPhone1\"\r\n                                                        placeholder=\"Owner's Primary Phone Number\"\r\n                                                        value={\r\n                                                            values.ownerPhone1\r\n                                                        }\r\n                                                        onChange={handleChange}\r\n                                                        onBlur={handleBlur}\r\n                                                        isInvalid={\r\n                                                            touched.ownerPhone1 &&\r\n                                                            !!errors.ownerPhone1\r\n                                                        }\r\n                                                        isValid={\r\n                                                            touched.ownerPhone1 &&\r\n                                                            !errors.ownerPhone1\r\n                                                        }\r\n                                                    />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {errors.ownerPhone1}\r\n                                                    </Form.Control.Feedback>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group>\r\n                                                    <Form.Label>\r\n                                                        Secondary Phone\r\n                                                    </Form.Label>\r\n                                                    <Form.Control\r\n                                                        type=\"phone\"\r\n                                                        name=\"ownerPhone2\"\r\n                                                        placeholder=\"Owner's Secondary Phone Number\"\r\n                                                        value={\r\n                                                            values.ownerPhone2\r\n                                                        }\r\n                                                        onChange={handleChange}\r\n                                                        onBlur={handleBlur}\r\n                                                        isInvalid={\r\n                                                            touched.ownerPhone2 &&\r\n                                                            !!errors.ownerPhone2\r\n                                                        }\r\n                                                    />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {errors.ownerPhone2}\r\n                                                    </Form.Control.Feedback>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Label>Address</Form.Label>\r\n                                                <Form.Group>\r\n                                                    <Form.Control\r\n                                                        type=\"text\"\r\n                                                        name=\"ownerAddress1\"\r\n                                                        placeholder=\"1234 Main St\"\r\n                                                        value={\r\n                                                            values.ownerAddress1\r\n                                                        }\r\n                                                        onChange={handleChange}\r\n                                                        onBlur={handleBlur}\r\n                                                        isInvalid={\r\n                                                            touched.ownerAddress1 &&\r\n                                                            !!errors.ownerAddress1\r\n                                                        }\r\n                                                        isValid={\r\n                                                            touched.ownerAddress1 &&\r\n                                                            !errors.ownerAddress1\r\n                                                        }\r\n                                                    />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {errors.ownerAddress1}\r\n                                                    </Form.Control.Feedback>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group>\r\n                                                    <Form.Control\r\n                                                        type=\"text\"\r\n                                                        name=\"ownerAddress2\"\r\n                                                        placeholder=\"Apartment, studio, or floor\"\r\n                                                        value={\r\n                                                            values.ownerAddress2\r\n                                                        }\r\n                                                        onChange={handleChange}\r\n                                                    />\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Row>\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"ownerCity\"\r\n                                                            placeholder=\"City\"\r\n                                                            value={\r\n                                                                values.ownerCity\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.ownerCity &&\r\n                                                                !!errors.ownerCity\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.ownerCity &&\r\n                                                                !errors.ownerCity\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.ownerCity}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"ownerState\"\r\n                                                            placeholder=\"State\"\r\n                                                            value={\r\n                                                                values.ownerState\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.ownerState &&\r\n                                                                !!errors.ownerState\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.ownerState &&\r\n                                                                !errors.ownerState\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.ownerState}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n                                                </Form.Row>\r\n\r\n                                                <Form.Row>\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"ownerZip\"\r\n                                                            placeholder=\"12345 (12345-6789)\"\r\n                                                            value={\r\n                                                                values.ownerZip\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.ownerZip &&\r\n                                                                !!errors.ownerZip\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.ownerZip &&\r\n                                                                !errors.ownerZip\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.ownerZip}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Control\r\n                                                            as=\"select\"\r\n                                                            name=\"ownerCountry\"\r\n                                                            value={\r\n                                                                values.ownerCountry\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                        >\r\n                                                            {this.listAllCountryOptions(\r\n                                                                values.ownerCountry\r\n                                                            )}\r\n                                                        </Form.Control>\r\n                                                    </Form.Group>\r\n                                                </Form.Row>\r\n\r\n                                                <Form.Group>\r\n                                                    <Form.Label>\r\n                                                        Secondary Contact\r\n                                                    </Form.Label>\r\n                                                    <Form.Control\r\n                                                        type=\"text\"\r\n                                                        name=\"ownerSecContact\"\r\n                                                        placeholder=\"Owner's Secondary Contact Information\"\r\n                                                        value={\r\n                                                            values.ownerSecContact\r\n                                                        }\r\n                                                        onChange={handleChange}\r\n                                                    />\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Label>\r\n                                                    Additional Phones\r\n                                                </Form.Label>\r\n                                                <Form.Group>\r\n                                                    <Form.Control\r\n                                                        type=\"phone\"\r\n                                                        name=\"ownerPhone3\"\r\n                                                        value={\r\n                                                            values.ownerPhone3\r\n                                                        }\r\n                                                        onChange={handleChange}\r\n                                                        onBlur={handleBlur}\r\n                                                        isInvalid={\r\n                                                            touched.ownerPhone3 &&\r\n                                                            !!errors.ownerPhone3\r\n                                                        }\r\n                                                    />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {errors.ownerPhone3}\r\n                                                    </Form.Control.Feedback>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group>\r\n                                                    <Form.Control\r\n                                                        type=\"phone\"\r\n                                                        name=\"ownerPhone4\"\r\n                                                        value={\r\n                                                            values.ownerPhone4\r\n                                                        }\r\n                                                        onChange={handleChange}\r\n                                                        onBlur={handleBlur}\r\n                                                        isInvalid={\r\n                                                            touched.ownerPhone4 &&\r\n                                                            !!errors.ownerPhone4\r\n                                                        }\r\n                                                    />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {errors.ownerPhone4}\r\n                                                    </Form.Control.Feedback>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group>\r\n                                                    <Form.Control\r\n                                                        type=\"phone\"\r\n                                                        name=\"ownerPhone5\"\r\n                                                        value={\r\n                                                            values.ownerPhone5\r\n                                                        }\r\n                                                        onChange={handleChange}\r\n                                                        onBlur={handleBlur}\r\n                                                        isInvalid={\r\n                                                            touched.ownerPhone5 &&\r\n                                                            !!errors.ownerPhone5\r\n                                                        }\r\n                                                    />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {errors.ownerPhone5}\r\n                                                    </Form.Control.Feedback>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group>\r\n                                                    <Form.Control\r\n                                                        type=\"phone\"\r\n                                                        name=\"ownerPhone6\"\r\n                                                        value={\r\n                                                            values.ownerPhone6\r\n                                                        }\r\n                                                        onChange={handleChange}\r\n                                                        onBlur={handleBlur}\r\n                                                        isInvalid={\r\n                                                            touched.ownerPhone6 &&\r\n                                                            !!errors.ownerPhone6\r\n                                                        }\r\n                                                    />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {errors.ownerPhone6}\r\n                                                    </Form.Control.Feedback>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group>\r\n                                                    <Form.Control\r\n                                                        type=\"phone\"\r\n                                                        name=\"ownerPhone7\"\r\n                                                        value={\r\n                                                            values.ownerPhone7\r\n                                                        }\r\n                                                        onChange={handleChange}\r\n                                                        onBlur={handleBlur}\r\n                                                        isInvalid={\r\n                                                            touched.ownerPhone7 &&\r\n                                                            !!errors.ownerPhone7\r\n                                                        }\r\n                                                    />\r\n                                                    <Form.Control.Feedback type=\"invalid\">\r\n                                                        {errors.ownerPhone7}\r\n                                                    </Form.Control.Feedback>\r\n                                                </Form.Group>\r\n\r\n                                                <Form.Group>\r\n                                                    <Form.Label>\r\n                                                        Special Note\r\n                                                    </Form.Label>\r\n                                                    <Form.Control\r\n                                                        as=\"textarea\"\r\n                                                        name=\"ownerNote\"\r\n                                                        value={values.ownerNote}\r\n                                                        onChange={handleChange}\r\n                                                    />\r\n                                                </Form.Group>\r\n                                            </Card.Body>\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row className=\"mt-5\">\r\n                                    <Col>\r\n                                        <Form.Group className=\"p-3 mb-0 shadow\">\r\n                                            <Row>\r\n                                                <Col className=\"text-center\">\r\n                                                    <Form.Label className=\"mb-0\">\r\n                                                        Select Membership Type\r\n                                                    </Form.Label>\r\n                                                </Col>\r\n\r\n                                                <Col className=\"p-0\">\r\n                                                    <Form.Check\r\n                                                        className=\"mr-4\"\r\n                                                        inline\r\n                                                        type=\"radio\"\r\n                                                        label=\"Platinum\"\r\n                                                        name=\"membership\"\r\n                                                        value=\"platinum\"\r\n                                                        checked={\r\n                                                            values.membership ===\r\n                                                            \"platinum\"\r\n                                                        }\r\n                                                        onChange={handleChange}\r\n                                                    />\r\n\r\n                                                    <Form.Check\r\n                                                        className=\"mr-4\"\r\n                                                        inline\r\n                                                        type=\"radio\"\r\n                                                        label=\"Diamond\"\r\n                                                        name=\"membership\"\r\n                                                        value=\"diamond\"\r\n                                                        checked={\r\n                                                            values.membership ===\r\n                                                            \"diamond\"\r\n                                                        }\r\n                                                        onChange={handleChange}\r\n                                                    />\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </Form.Group>\r\n                                    </Col>\r\n\r\n                                    <Col>\r\n                                        <Button\r\n                                            className=\"float-right\"\r\n                                            variant=\"outline-secondary\"\r\n                                            onClick={this.onClickCancel}\r\n                                        >\r\n                                            Cancel\r\n                                        </Button>\r\n\r\n                                        <Button\r\n                                            className=\"float-right mr-2\"\r\n                                            variant=\"primary\"\r\n                                            type=\"submit\"\r\n                                            disabled={isSubmitting}\r\n                                        >\r\n                                            Register Pet\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                                {this.state.error !== \"\" && (\r\n                                    <Form.Text className=\"text-danger float-right pr-5\">\r\n                                        {this.state.error}\r\n                                    </Form.Text>\r\n                                )}\r\n                            </Container>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport const ownerGetListService = async (activePage) => {\r\n    try {\r\n        return await axios.get(\r\n            `${window.$server_url}/owners/page/${activePage}`\r\n        );\r\n    } catch (err) {\r\n        return {\r\n            error: true,\r\n            errMsg: err.message,\r\n        };\r\n    }\r\n};\r\n\r\nexport const ownerGetCountService = async () => {\r\n    try {\r\n        return await axios.get(`${window.$server_url}/owners/count`);\r\n    } catch (err) {\r\n        return {\r\n            error: true,\r\n            errMsg: err.message,\r\n        };\r\n    }\r\n};\r\n\r\nexport const ownerGetService = async (_id) => {\r\n    try {\r\n        return await axios.get(`${window.$server_url}/owners/${_id}`);\r\n    } catch (err) {\r\n        return {\r\n            error: true,\r\n            errMsg: err.message,\r\n        };\r\n    }\r\n};\r\n\r\nexport const ownerRegisterService = async (owner) => {\r\n    try {\r\n        return await axios.post(`${window.$server_url}/owners/add`, owner);\r\n    } catch (err) {\r\n        return {\r\n            error: true,\r\n            errMsg: err.message,\r\n        };\r\n    }\r\n};\r\n\r\nexport const ownerDeleteService = async (_id) => {\r\n    try {\r\n        return await axios.delete(`${window.$server_url}/owners/delete/${_id}`);\r\n    } catch (err) {\r\n        return {\r\n            error: true,\r\n            errMsg: err.message,\r\n        };\r\n    }\r\n};\r\n\r\nexport const ownerUpdateService = async (id, owner) => {\r\n    try {\r\n        return await axios.patch(\r\n            `${window.$server_url}/owners/update/${id}`,\r\n            owner\r\n        );\r\n    } catch (err) {\r\n        return {\r\n            error: true,\r\n            errMsg: err.message,\r\n        };\r\n    }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport { Container, Row, Col, Form, Button } from \"react-bootstrap\";\r\nimport { FaSearch, FaTrashAlt } from \"react-icons/fa\";\r\nimport { FcCancel } from \"react-icons/fc\";\r\nimport { MdErrorOutline } from \"react-icons/md\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\n\r\nimport {\r\n    ownerGetListService,\r\n    ownerGetCountService,\r\n    ownerDeleteService,\r\n} from \"./../services/owner.service\";\r\nimport { verifyTokenAsync } from \"../actions/auth-async.action\";\r\nimport { setAuthToken } from \"../services/auth.service\";\r\nimport { ownerSearchService } from \"../services/search.service\";\r\nimport { useFormInput } from \"../utils/form-input.util\";\r\nimport { useFormCheck } from \"../utils/form-check.util\";\r\nimport Pagination from \"../utils/pagination.util\";\r\n\r\nexport default function OwnerList() {\r\n    /*\r\n     * Private Page Token Verification Module.\r\n     */\r\n    const auth_obj = useSelector((state) => state.auth);\r\n    const { token, expiredAt } = auth_obj;\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        setAuthToken(token);\r\n        const verifyTokenTimer = setTimeout(() => {\r\n            dispatch(verifyTokenAsync(true));\r\n        }, moment(expiredAt).diff() - 10 * 1000);\r\n        return () => {\r\n            clearTimeout(verifyTokenTimer);\r\n        };\r\n    }, [expiredAt, token, dispatch]);\r\n    /* ----------------------- */\r\n\r\n    const [owners, setOwners] = useState([]);\r\n    const [activePage, setActivePage] = useState(1);\r\n    const [totalPages, setTotalPages] = useState(1);\r\n    const [pageLoading, setPageLoading] = useState(true);\r\n\r\n    const searchCategory = useFormCheck(\"email\");\r\n    const searchValue = useFormInput(\"\");\r\n    const [hasResult, setHasResult] = useState(false);\r\n    const [hasSearchError, setHasSearchError] = useState(false);\r\n    const [isSearching, setIsSearching] = useState(false);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const ownerList = await ownerGetListService(activePage);\r\n            if (!ownerList.error) {\r\n                setOwners(ownerList.data);\r\n            }\r\n\r\n            const ownerCount = await ownerGetCountService();\r\n            if (!ownerCount.error)\r\n                setTotalPages(parseInt(ownerCount.data / 20));\r\n            setPageLoading(false);\r\n        }\r\n        if (!hasResult) {\r\n            setPageLoading(true);\r\n            fetchData();\r\n        }\r\n    }, [dispatch, activePage, hasResult]);\r\n\r\n    const handleSearch = (e) => {\r\n        if (e) e.preventDefault();\r\n\r\n        if (searchValue.value.trim() !== \"\") {\r\n            async function fetchData() {\r\n                setIsSearching(true);\r\n\r\n                const searchReq = {\r\n                    field: searchCategory.selected,\r\n                    value: searchValue.value.trim(),\r\n                };\r\n\r\n                const searchResult = await ownerSearchService(searchReq);\r\n                if (searchResult.error) {\r\n                    setHasSearchError(true);\r\n                    setHasResult(false);\r\n                } else {\r\n                    setHasSearchError(false);\r\n                    setHasResult(true);\r\n                    setOwners(searchResult.data);\r\n                }\r\n\r\n                setIsSearching(false);\r\n            }\r\n            fetchData();\r\n        }\r\n    };\r\n\r\n    const handleCancel = (e) => {\r\n        e.preventDefault();\r\n\r\n        setHasSearchError(false);\r\n        setHasResult(false);\r\n    };\r\n\r\n    const handleDelete = (_id) => {\r\n        async function fetchData() {\r\n            const result = await ownerDeleteService(_id);\r\n            if (result.error) {\r\n                console.log(result.errMsg);\r\n            } else {\r\n                async function fetchOwnerData() {\r\n                    const ownerList = await ownerGetListService(activePage);\r\n                    if (!ownerList.error) {\r\n                        if (hasResult) {\r\n                            handleSearch();\r\n                        } else {\r\n                            setOwners(ownerList.data);\r\n                        }\r\n                    }\r\n\r\n                    const ownerCount = await ownerGetCountService();\r\n                    if (!ownerCount.error)\r\n                        setTotalPages(parseInt(ownerCount.data / 20));\r\n                }\r\n                fetchOwnerData();\r\n            }\r\n            setPageLoading(false);\r\n        }\r\n        setPageLoading(true);\r\n        fetchData();\r\n    };\r\n\r\n    const pagination = () => {\r\n        async function handleNextPage(activePage) {\r\n            setActivePage(activePage);\r\n        }\r\n\r\n        return (\r\n            <Pagination\r\n                totalPages={totalPages}\r\n                currentPage={activePage}\r\n                onChange={handleNextPage}\r\n            />\r\n        );\r\n    };\r\n\r\n    const Owner = (props) => (\r\n        <tr>\r\n            <td>\r\n                <Link to={\"/owners/edit/\" + props.owner._id}>\r\n                    {props.owner.ownerName}\r\n                </Link>\r\n            </td>\r\n            <td className=\"text-lowercase\">{props.owner.email}</td>\r\n            <td>{props.owner.ownerPhone1}</td>\r\n            <td className=\"text-capitalize\">{props.owner.ownerCity}</td>\r\n            <td className=\"text-capitalize\">{props.owner.ownerState}</td>\r\n            <td>\r\n                {moment(new Date(props.owner.registered_at)).format(\r\n                    \"MMM DD, YYYY\"\r\n                )}\r\n            </td>\r\n            <td className=\"text-center\">\r\n                <span\r\n                    style={{ cursor: \"pointer\" }}\r\n                    onClick={() => handleDelete(props.owner._id)}\r\n                >\r\n                    {\" \"}\r\n                    <FaTrashAlt className=\"text-danger mx-1\" />\r\n                </span>\r\n            </td>\r\n        </tr>\r\n    );\r\n\r\n    const ownerList = (owners) => {\r\n        if (pageLoading) {\r\n            return (\r\n                <tr>\r\n                    <td>\r\n                        <Container\r\n                            className=\"my-5 py-5 text-center\"\r\n                            style={{ position: \"absolute\" }}\r\n                        >\r\n                            <ClipLoader\r\n                                css=\"margin: auto;\"\r\n                                size={100}\r\n                                color={\"#ff0000\"}\r\n                                loading={pageLoading}\r\n                            />\r\n                        </Container>\r\n                    </td>\r\n                </tr>\r\n            );\r\n        } else {\r\n            return owners.map(function (owner, index) {\r\n                return <Owner owner={owner} key={index} />;\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h1 className=\"m-5 text-center\">Registerd Owners</h1>\r\n\r\n                <Row className=\"mt-4\">\r\n                    <Col>\r\n                        <Form>\r\n                            <Form.Group as={Row}>\r\n                                <Col md=\"4\" className=\"pl-0 my-auto\">\r\n                                    <Form.Control\r\n                                        as=\"select\"\r\n                                        className=\"text-capitalize\"\r\n                                        {...searchCategory}\r\n                                    >\r\n                                        <option value=\"email\">Email</option>\r\n                                        <option value=\"ownerName\">\r\n                                            Owner Name\r\n                                        </option>\r\n                                        <option value=\"ownerState\">\r\n                                            Owner State\r\n                                        </option>\r\n                                    </Form.Control>\r\n                                </Col>\r\n\r\n                                <Col md=\"5\" className=\"pl-0 my-auto\">\r\n                                    <Form.Control\r\n                                        type=\"text\"\r\n                                        {...searchValue}\r\n                                    />\r\n                                </Col>\r\n\r\n                                <Col md=\"3\" className=\"pl-0\">\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        variant=\"outline-info\"\r\n                                        className=\"float-left px-2\"\r\n                                        disabled={isSearching}\r\n                                        onClick={handleSearch}\r\n                                    >\r\n                                        <FaSearch className=\"text-danger mx-1\" />\r\n                                    </Button>\r\n                                    <Button\r\n                                        variant=\"outline-danger\"\r\n                                        className=\"float-left px-2\"\r\n                                        disabled={isSearching}\r\n                                        onClick={handleCancel}\r\n                                    >\r\n                                        <FcCancel className=\"text-info mx-1\" />\r\n                                    </Button>\r\n                                </Col>\r\n                            </Form.Group>\r\n                        </Form>\r\n                    </Col>\r\n                    <Col className=\"px-0\">\r\n                        {totalPages > 1 &&\r\n                            !hasResult &&\r\n                            !hasSearchError &&\r\n                            pagination()}\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Table responsive>\r\n                        <thead className=\"bg-danger text-white\">\r\n                            <tr>\r\n                                <th style={{ width: \"20%\", maxWidth: \"20%\" }}>\r\n                                    Full Name\r\n                                </th>\r\n                                <th style={{ width: \"20%\", maxWidth: \"20%\" }}>\r\n                                    Email Address\r\n                                </th>\r\n                                <th style={{ width: \"14%\", maxWidth: \"14%\" }}>\r\n                                    Primary Phone\r\n                                </th>\r\n                                <th style={{ width: \"14%\", maxWidth: \"14%\" }}>\r\n                                    City\r\n                                </th>\r\n                                <th style={{ width: \"14%\", maxWidth: \"14%\" }}>\r\n                                    State\r\n                                </th>\r\n                                <th style={{ width: \"13%\", maxWidth: \"13%\" }}>\r\n                                    Registered At\r\n                                </th>\r\n                                <th style={{ width: \"5%\", maxWidth: \"5%\" }}>\r\n                                    Action\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        {!hasSearchError && <tbody>{ownerList(owners)}</tbody>}\r\n                    </Table>\r\n                </Row>\r\n\r\n                {hasSearchError && (\r\n                    <Row className=\"justify-content-md-center my-5\">\r\n                        <MdErrorOutline\r\n                            className=\"text-warning mr-1\"\r\n                            size={24}\r\n                        />\r\n                        No Owner Found\r\n                    </Row>\r\n                )}\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Formik } from \"formik\";\r\nimport \"@availity/yup\";\r\nimport * as yup from \"yup\";\r\nimport csc from \"country-state-city\";\r\nimport { Container, Row, Col, Form, Button, Card } from \"react-bootstrap\";\r\n\r\nconst CountryOptions = (props) => (\r\n    <option value={props.sortname}>{props.name}</option>\r\n);\r\n\r\nconst zipcodeRegExp = /^\\d{5}(?:[-\\s]\\d{4})?$/;\r\n\r\nconst schema = yup.object({\r\n    email: yup\r\n        .string()\r\n        .email(\"Invalid email address\")\r\n        .required(\"Email is a required field\"),\r\n    ownerName: yup.string().required(\"Owner Name is a required field\"),\r\n    ownerPhone1: yup\r\n        .string()\r\n        .phone(\"Phone number is not valid\")\r\n        .required(\"Phone is a required field\"),\r\n    ownerPhone2: yup.string().phone(\"Phone number is not valid\"),\r\n    ownerPhone3: yup.string().phone(\"Phone number is not valid\"),\r\n    ownerPhone4: yup.string().phone(\"Phone number is not valid\"),\r\n    ownerPhone5: yup.string().phone(\"Phone number is not valid\"),\r\n    ownerPhone6: yup.string().phone(\"Phone number is not valid\"),\r\n    ownerPhone7: yup.string().phone(\"Phone number is not valid\"),\r\n    ownerAddress1: yup.string().required(\"Address is a required field\"),\r\n    ownerCity: yup.string().required(\"City is a required field\"),\r\n    ownerState: yup.string().required(\"State is a required field\"),\r\n    ownerZip: yup\r\n        .string()\r\n        .matches(zipcodeRegExp, \"Invalid Zip Code.\")\r\n        .required(\"Zipcode is a required field\"),\r\n});\r\n\r\nexport default class UpdateOwner extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onClickSubmit = this.onClickSubmit.bind(this);\r\n        this.onClickCancel = this.onClickCancel.bind(this);\r\n\r\n        this.state = {\r\n            values: {\r\n                email: \"\",\r\n                ownerName: \"\",\r\n                ownerPhone1: \"\",\r\n                ownerPhone2: \"\",\r\n                ownerPhone3: \"\",\r\n                ownerPhone4: \"\",\r\n                ownerPhone5: \"\",\r\n                ownerPhone6: \"\",\r\n                ownerPhone7: \"\",\r\n                ownerAddress1: \"\",\r\n                ownerAddress2: \"\",\r\n                ownerCity: \"\",\r\n                ownerState: \"\",\r\n                ownerZip: \"\",\r\n                ownerCountry: \"US\",\r\n                ownerSecContact: \"\",\r\n                ownerNote: \"\",\r\n            },\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios\r\n            .get(window.$server_url + \"/owners/\" + this.props.match.params.id)\r\n            .then((res) => {\r\n                this.setState({\r\n                    values: res.data,\r\n                });\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    onClickSubmit(values) {\r\n        // Update Owner\r\n        axios\r\n            .patch(\r\n                window.$server_url + \"/owners/edit/\" + this.state.values._id,\r\n                values\r\n            )\r\n            .then((res) => {\r\n                this.props.history.push(\"/owners\");\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    onClickCancel(e) {\r\n        e.preventDefault();\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    listAllCountryOptions() {\r\n        return csc.getAllCountries().map(function (country, index) {\r\n            return (\r\n                <CountryOptions\r\n                    name={country.name}\r\n                    sortname={country.sortname}\r\n                    key={index}\r\n                ></CountryOptions>\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Container>\r\n                    <h1 className=\"m-5 text-center\">Update Owner</h1>\r\n                </Container>\r\n\r\n                <Formik\r\n                    enableReinitialize={true}\r\n                    validationSchema={schema}\r\n                    initialValues={{\r\n                        email: this.state.values.email,\r\n                        ownerName: this.state.values.ownerName,\r\n                        ownerPhone1: this.state.values.ownerPhone1,\r\n                        ownerPhone2: this.state.values.ownerPhone2,\r\n                        ownerPhone3: this.state.values.ownerPhone3,\r\n                        ownerPhone4: this.state.values.ownerPhone4,\r\n                        ownerPhone5: this.state.values.ownerPhone5,\r\n                        ownerPhone6: this.state.values.ownerPhone6,\r\n                        ownerPhone7: this.state.values.ownerPhone7,\r\n                        ownerAddress1: this.state.values.ownerAddress1,\r\n                        ownerAddress2: this.state.values.ownerAddress2,\r\n                        ownerCity: this.state.values.ownerCity,\r\n                        ownerState: this.state.values.ownerState,\r\n                        ownerZip: this.state.values.ownerZip,\r\n                        ownerCountry: this.state.values.ownerCountry,\r\n                        ownerSecContact: this.state.values.ownerSecContact,\r\n                        ownerNote: this.state.values.ownerNote,\r\n                    }}\r\n                    onSubmit={(values, { setSubmitting }) => {\r\n                        setTimeout(() => {\r\n                            this.onClickSubmit(values);\r\n                            setSubmitting(false);\r\n                        }, 400);\r\n                    }}\r\n                >\r\n                    {({\r\n                        values,\r\n                        handleSubmit,\r\n                        handleChange,\r\n                        handleBlur,\r\n                        touched,\r\n                        errors,\r\n                        isSubmitting,\r\n                    }) => (\r\n                        <Form\r\n                            noValidate\r\n                            onSubmit={handleSubmit}\r\n                            autoComplete=\"off\"\r\n                        >\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Card className=\"h-100 shadow\">\r\n                                            <Card.Header className=\"bg-success text-white\">\r\n                                                <h5 className=\"m-0\">\r\n                                                    Owner Information\r\n                                                </h5>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                <Form.Row>\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Label>\r\n                                                            Email Address\r\n                                                        </Form.Label>\r\n                                                        <Form.Control\r\n                                                            type=\"email\"\r\n                                                            name=\"email\"\r\n                                                            placeholder=\"Owner's Email Address\"\r\n                                                            value={values.email}\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.email &&\r\n                                                                !!errors.email\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.email &&\r\n                                                                !errors.email\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.email}\r\n                                                        </Form.Control.Feedback>\r\n                                                        <Form.Text className=\"text-muted\">\r\n                                                            We'll never share\r\n                                                            your email with\r\n                                                            anyone else.\r\n                                                        </Form.Text>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Label>\r\n                                                            Name\r\n                                                        </Form.Label>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"ownerName\"\r\n                                                            placeholder=\"Owner's Full Name\"\r\n                                                            value={\r\n                                                                values.ownerName\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.ownerName &&\r\n                                                                !!errors.ownerName\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.ownerName &&\r\n                                                                !errors.ownerName\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.ownerName}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n                                                </Form.Row>\r\n\r\n                                                <Form.Row>\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Label>\r\n                                                            Phone\r\n                                                        </Form.Label>\r\n                                                        <Form.Control\r\n                                                            type=\"phone\"\r\n                                                            name=\"ownerPhone1\"\r\n                                                            placeholder=\"Owner's Primary Phone Number\"\r\n                                                            value={\r\n                                                                values.ownerPhone1\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.ownerPhone1 &&\r\n                                                                !!errors.ownerPhone1\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.ownerPhone1 &&\r\n                                                                !errors.ownerPhone1\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.ownerPhone1}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Label>\r\n                                                            Secondary Phone\r\n                                                        </Form.Label>\r\n                                                        <Form.Control\r\n                                                            type=\"phone\"\r\n                                                            name=\"ownerPhone2\"\r\n                                                            placeholder=\"Owner's Secondary Phone Number\"\r\n                                                            value={\r\n                                                                values.ownerPhone2\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.ownerPhone2 &&\r\n                                                                !!errors.ownerPhone2\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.ownerPhone2}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n                                                </Form.Row>\r\n\r\n                                                <Form.Label>Address</Form.Label>\r\n                                                <Form.Row>\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"ownerAddress1\"\r\n                                                            placeholder=\"1234 Main St\"\r\n                                                            value={\r\n                                                                values.ownerAddress1\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.ownerAddress1 &&\r\n                                                                !!errors.ownerAddress1\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.ownerAddress1 &&\r\n                                                                !errors.ownerAddress1\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {\r\n                                                                errors.ownerAddress1\r\n                                                            }\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"ownerAddress2\"\r\n                                                            placeholder=\"Apartment, studio, or floor\"\r\n                                                            value={\r\n                                                                values.ownerAddress2\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                        />\r\n                                                    </Form.Group>\r\n                                                </Form.Row>\r\n\r\n                                                <Form.Row>\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"ownerCity\"\r\n                                                            placeholder=\"City\"\r\n                                                            value={\r\n                                                                values.ownerCity\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.ownerCity &&\r\n                                                                !!errors.ownerCity\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.ownerCity &&\r\n                                                                !errors.ownerCity\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.ownerCity}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"ownerState\"\r\n                                                            placeholder=\"State\"\r\n                                                            value={\r\n                                                                values.ownerState\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.ownerState &&\r\n                                                                !!errors.ownerState\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.ownerState &&\r\n                                                                !errors.ownerState\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.ownerState}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"ownerZip\"\r\n                                                            placeholder=\"12345 (12345-6789)\"\r\n                                                            value={\r\n                                                                values.ownerZip\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.ownerZip &&\r\n                                                                !!errors.ownerZip\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.ownerZip &&\r\n                                                                !errors.ownerZip\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.ownerZip}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Control\r\n                                                            as=\"select\"\r\n                                                            name=\"ownerCountry\"\r\n                                                            value={\r\n                                                                values.ownerCountry\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                        >\r\n                                                            {this.listAllCountryOptions(\r\n                                                                values.ownerCountry\r\n                                                            )}\r\n                                                        </Form.Control>\r\n                                                    </Form.Group>\r\n                                                </Form.Row>\r\n\r\n                                                <Form.Row>\r\n                                                    <Col>\r\n                                                        <Form.Group>\r\n                                                            <Form.Label>\r\n                                                                Secondary\r\n                                                                Contact\r\n                                                            </Form.Label>\r\n                                                            <Form.Control\r\n                                                                type=\"text\"\r\n                                                                name=\"ownerSecContact\"\r\n                                                                placeholder=\"Owner's Secondary Contact Information\"\r\n                                                                value={\r\n                                                                    values.ownerSecContact\r\n                                                                }\r\n                                                                onChange={\r\n                                                                    handleChange\r\n                                                                }\r\n                                                            />\r\n                                                        </Form.Group>\r\n\r\n                                                        <Form.Group>\r\n                                                            <Form.Label>\r\n                                                                Special Note\r\n                                                            </Form.Label>\r\n                                                            <Form.Control\r\n                                                                as=\"textarea\"\r\n                                                                name=\"ownerNote\"\r\n                                                                value={\r\n                                                                    values.ownerNote\r\n                                                                }\r\n                                                                onChange={\r\n                                                                    handleChange\r\n                                                                }\r\n                                                            />\r\n                                                        </Form.Group>\r\n                                                    </Col>\r\n\r\n                                                    <Col>\r\n                                                        <Form.Group>\r\n                                                            <Form.Label>\r\n                                                                Additional\r\n                                                                Phones\r\n                                                            </Form.Label>\r\n                                                            <Form.Control\r\n                                                                type=\"phone\"\r\n                                                                name=\"ownerPhone3\"\r\n                                                                value={\r\n                                                                    values.ownerPhone3\r\n                                                                }\r\n                                                                onChange={\r\n                                                                    handleChange\r\n                                                                }\r\n                                                                onBlur={\r\n                                                                    handleBlur\r\n                                                                }\r\n                                                                isInvalid={\r\n                                                                    touched.ownerPhone3 &&\r\n                                                                    !!errors.ownerPhone3\r\n                                                                }\r\n                                                            />\r\n                                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                                {\r\n                                                                    errors.ownerPhone3\r\n                                                                }\r\n                                                            </Form.Control.Feedback>\r\n                                                        </Form.Group>\r\n\r\n                                                        <Form.Group>\r\n                                                            <Form.Control\r\n                                                                type=\"phone\"\r\n                                                                name=\"ownerPhone4\"\r\n                                                                value={\r\n                                                                    values.ownerPhone4\r\n                                                                }\r\n                                                                onChange={\r\n                                                                    handleChange\r\n                                                                }\r\n                                                                onBlur={\r\n                                                                    handleBlur\r\n                                                                }\r\n                                                                isInvalid={\r\n                                                                    touched.ownerPhone4 &&\r\n                                                                    !!errors.ownerPhone4\r\n                                                                }\r\n                                                            />\r\n                                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                                {\r\n                                                                    errors.ownerPhone4\r\n                                                                }\r\n                                                            </Form.Control.Feedback>\r\n                                                        </Form.Group>\r\n\r\n                                                        <Form.Group>\r\n                                                            <Form.Control\r\n                                                                type=\"phone\"\r\n                                                                name=\"ownerPhone5\"\r\n                                                                value={\r\n                                                                    values.ownerPhone5\r\n                                                                }\r\n                                                                onChange={\r\n                                                                    handleChange\r\n                                                                }\r\n                                                                onBlur={\r\n                                                                    handleBlur\r\n                                                                }\r\n                                                                isInvalid={\r\n                                                                    touched.ownerPhone5 &&\r\n                                                                    !!errors.ownerPhone5\r\n                                                                }\r\n                                                            />\r\n                                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                                {\r\n                                                                    errors.ownerPhone5\r\n                                                                }\r\n                                                            </Form.Control.Feedback>\r\n                                                        </Form.Group>\r\n\r\n                                                        <Form.Group>\r\n                                                            <Form.Control\r\n                                                                type=\"phone\"\r\n                                                                name=\"ownerPhone6\"\r\n                                                                value={\r\n                                                                    values.ownerPhone6\r\n                                                                }\r\n                                                                onChange={\r\n                                                                    handleChange\r\n                                                                }\r\n                                                                onBlur={\r\n                                                                    handleBlur\r\n                                                                }\r\n                                                                isInvalid={\r\n                                                                    touched.ownerPhone6 &&\r\n                                                                    !!errors.ownerPhone6\r\n                                                                }\r\n                                                            />\r\n                                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                                {\r\n                                                                    errors.ownerPhone6\r\n                                                                }\r\n                                                            </Form.Control.Feedback>\r\n                                                        </Form.Group>\r\n\r\n                                                        <Form.Group>\r\n                                                            <Form.Control\r\n                                                                type=\"phone\"\r\n                                                                name=\"ownerPhone7\"\r\n                                                                value={\r\n                                                                    values.ownerPhone7\r\n                                                                }\r\n                                                                onChange={\r\n                                                                    handleChange\r\n                                                                }\r\n                                                                onBlur={\r\n                                                                    handleBlur\r\n                                                                }\r\n                                                                isInvalid={\r\n                                                                    touched.ownerPhone7 &&\r\n                                                                    !!errors.ownerPhone7\r\n                                                                }\r\n                                                            />\r\n                                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                                {\r\n                                                                    errors.ownerPhone7\r\n                                                                }\r\n                                                            </Form.Control.Feedback>\r\n                                                        </Form.Group>\r\n                                                    </Col>\r\n                                                </Form.Row>\r\n                                            </Card.Body>\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row className=\"mt-5\">\r\n                                    <Col>\r\n                                        <Button\r\n                                            className=\"float-right\"\r\n                                            variant=\"outline-secondary\"\r\n                                            onClick={this.onClickCancel}\r\n                                        >\r\n                                            Cancel\r\n                                        </Button>\r\n\r\n                                        <Button\r\n                                            className=\"float-right mr-2\"\r\n                                            variant=\"primary\"\r\n                                            type=\"submit\"\r\n                                            disabled={isSubmitting}\r\n                                        >\r\n                                            Update Owner\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Formik } from \"formik\";\r\nimport \"@availity/yup\";\r\nimport * as yup from \"yup\";\r\nimport csc from \"country-state-city\";\r\nimport { Container, Row, Col, Form, Button, Card } from \"react-bootstrap\";\r\n\r\nconst CountryOptions = (props) => (\r\n    <option value={props.sortname}>{props.name}</option>\r\n);\r\n\r\nconst zipcodeRegExp = /^\\d{5}(?:[-\\s]\\d{4})?$/;\r\n\r\nconst schema = yup.object({\r\n    email: yup\r\n        .string()\r\n        .email(\"Invalid email address\")\r\n        .required(\"Email is a required field\"),\r\n    ownerName: yup.string().required(\"Owner Name is a required field\"),\r\n    ownerPhone1: yup\r\n        .string()\r\n        .phone(\"Phone number is not valid\")\r\n        .required(\"Phone is a required field\"),\r\n    ownerPhone2: yup.string().phone(\"Phone number is not valid\"),\r\n    ownerPhone3: yup.string().phone(\"Phone number is not valid\"),\r\n    ownerPhone4: yup.string().phone(\"Phone number is not valid\"),\r\n    ownerPhone5: yup.string().phone(\"Phone number is not valid\"),\r\n    ownerPhone6: yup.string().phone(\"Phone number is not valid\"),\r\n    ownerPhone7: yup.string().phone(\"Phone number is not valid\"),\r\n    ownerAddress1: yup.string().required(\"Address is a required field\"),\r\n    ownerCity: yup.string().required(\"City is a required field\"),\r\n    ownerState: yup.string().required(\"State is a required field\"),\r\n    ownerZip: yup\r\n        .string()\r\n        .matches(zipcodeRegExp, \"Invalid Zip Code.\")\r\n        .required(\"Zipcode is a required field\"),\r\n});\r\n\r\nexport default class RegisterOwner extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.onClickSubmit = this.onClickSubmit.bind(this);\r\n        this.onClickCancel = this.onClickCancel.bind(this);\r\n\r\n        this.state = {\r\n            error: \"\",\r\n        };\r\n    }\r\n\r\n    onClickSubmit(values) {\r\n        // Register Owner\r\n        axios\r\n            .post(window.$server_url + \"/owners/register\", values)\r\n            .then((res) => {\r\n                this.props.history.push(\"/owners\");\r\n            })\r\n            .catch((err) => {\r\n                this.setState({\r\n                    error: err.response.data,\r\n                });\r\n            });\r\n    }\r\n\r\n    onClickCancel(e) {\r\n        e.preventDefault();\r\n        this.props.history.push(\"/owners\");\r\n    }\r\n\r\n    listAllCountryOptions() {\r\n        return csc.getAllCountries().map(function (country, index) {\r\n            return (\r\n                <CountryOptions\r\n                    name={country.name}\r\n                    sortname={country.sortname}\r\n                    key={index}\r\n                ></CountryOptions>\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <Container>\r\n                    <h1 className=\"m-5 text-center\">Register New Owner</h1>\r\n                </Container>\r\n\r\n                <Formik\r\n                    validationSchema={schema}\r\n                    initialValues={{\r\n                        email: \"\",\r\n                        ownerName: \"\",\r\n                        ownerPhone1: \"\",\r\n                        ownerPhone2: \"\",\r\n                        ownerPhone3: \"\",\r\n                        ownerPhone4: \"\",\r\n                        ownerPhone5: \"\",\r\n                        ownerPhone6: \"\",\r\n                        ownerPhone7: \"\",\r\n                        ownerAddress1: \"\",\r\n                        ownerAddress2: \"\",\r\n                        ownerCity: \"\",\r\n                        ownerState: \"\",\r\n                        ownerZip: \"\",\r\n                        ownerCountry: \"US\",\r\n                        ownerSecContact: \"\",\r\n                        ownerNote: \"\",\r\n                    }}\r\n                    onSubmit={(values, { setSubmitting }) => {\r\n                        setTimeout(() => {\r\n                            this.onClickSubmit(values);\r\n                            setSubmitting(false);\r\n                        }, 400);\r\n                    }}\r\n                >\r\n                    {({\r\n                        values,\r\n                        handleSubmit,\r\n                        handleChange,\r\n                        handleBlur,\r\n                        touched,\r\n                        errors,\r\n                        isSubmitting,\r\n                    }) => (\r\n                        <Form\r\n                            noValidate\r\n                            onSubmit={handleSubmit}\r\n                            autoComplete=\"off\"\r\n                        >\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col>\r\n                                        <Card className=\"h-100 shadow\">\r\n                                            <Card.Header className=\"bg-success text-white\">\r\n                                                <h5 className=\"m-0\">\r\n                                                    Owner Information\r\n                                                </h5>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                <Form.Row>\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Label>\r\n                                                            Email Address\r\n                                                        </Form.Label>\r\n                                                        <Form.Control\r\n                                                            type=\"email\"\r\n                                                            name=\"email\"\r\n                                                            placeholder=\"Owner's Email Address\"\r\n                                                            value={values.email}\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.email &&\r\n                                                                !!errors.email\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.email &&\r\n                                                                !errors.email\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.email}\r\n                                                        </Form.Control.Feedback>\r\n                                                        <Form.Text className=\"text-muted\">\r\n                                                            We'll never share\r\n                                                            your email with\r\n                                                            anyone else.\r\n                                                        </Form.Text>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Label>\r\n                                                            Name\r\n                                                        </Form.Label>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"ownerName\"\r\n                                                            placeholder=\"Owner's Full Name\"\r\n                                                            value={\r\n                                                                values.ownerName\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.ownerName &&\r\n                                                                !!errors.ownerName\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.ownerName &&\r\n                                                                !errors.ownerName\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.ownerName}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n                                                </Form.Row>\r\n\r\n                                                <Form.Row>\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Label>\r\n                                                            Phone\r\n                                                        </Form.Label>\r\n                                                        <Form.Control\r\n                                                            type=\"phone\"\r\n                                                            name=\"ownerPhone1\"\r\n                                                            placeholder=\"Owner's Primary Phone Number\"\r\n                                                            value={\r\n                                                                values.ownerPhone1\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.ownerPhone1 &&\r\n                                                                !!errors.ownerPhone1\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.ownerPhone1 &&\r\n                                                                !errors.ownerPhone1\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.ownerPhone1}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Label>\r\n                                                            Secondary Phone\r\n                                                        </Form.Label>\r\n                                                        <Form.Control\r\n                                                            type=\"phone\"\r\n                                                            name=\"ownerPhone2\"\r\n                                                            placeholder=\"Owner's Secondary Phone Number\"\r\n                                                            value={\r\n                                                                values.ownerPhone2\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.ownerPhone2 &&\r\n                                                                !!errors.ownerPhone2\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.ownerPhone2}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n                                                </Form.Row>\r\n\r\n                                                <Form.Label>Address</Form.Label>\r\n                                                <Form.Row>\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"ownerAddress1\"\r\n                                                            placeholder=\"1234 Main St\"\r\n                                                            value={\r\n                                                                values.ownerAddress1\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.ownerAddress1 &&\r\n                                                                !!errors.ownerAddress1\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.ownerAddress1 &&\r\n                                                                !errors.ownerAddress1\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {\r\n                                                                errors.ownerAddress1\r\n                                                            }\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"ownerAddress2\"\r\n                                                            placeholder=\"Apartment, studio, or floor\"\r\n                                                            value={\r\n                                                                values.ownerAddress2\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                        />\r\n                                                    </Form.Group>\r\n                                                </Form.Row>\r\n\r\n                                                <Form.Row>\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"ownerCity\"\r\n                                                            placeholder=\"City\"\r\n                                                            value={\r\n                                                                values.ownerCity\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.ownerCity &&\r\n                                                                !!errors.ownerCity\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.ownerCity &&\r\n                                                                !errors.ownerCity\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.ownerCity}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"ownerState\"\r\n                                                            placeholder=\"State\"\r\n                                                            value={\r\n                                                                values.ownerState\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.ownerState &&\r\n                                                                !!errors.ownerState\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.ownerState &&\r\n                                                                !errors.ownerState\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.ownerState}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Control\r\n                                                            type=\"text\"\r\n                                                            name=\"ownerZip\"\r\n                                                            placeholder=\"12345 (12345-6789)\"\r\n                                                            value={\r\n                                                                values.ownerZip\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                            onBlur={handleBlur}\r\n                                                            isInvalid={\r\n                                                                touched.ownerZip &&\r\n                                                                !!errors.ownerZip\r\n                                                            }\r\n                                                            isValid={\r\n                                                                touched.ownerZip &&\r\n                                                                !errors.ownerZip\r\n                                                            }\r\n                                                        />\r\n                                                        <Form.Control.Feedback type=\"invalid\">\r\n                                                            {errors.ownerZip}\r\n                                                        </Form.Control.Feedback>\r\n                                                    </Form.Group>\r\n\r\n                                                    <Form.Group as={Col}>\r\n                                                        <Form.Control\r\n                                                            as=\"select\"\r\n                                                            name=\"ownerCountry\"\r\n                                                            value={\r\n                                                                values.ownerCountry\r\n                                                            }\r\n                                                            onChange={\r\n                                                                handleChange\r\n                                                            }\r\n                                                        >\r\n                                                            {this.listAllCountryOptions(\r\n                                                                values.ownerCountry\r\n                                                            )}\r\n                                                        </Form.Control>\r\n                                                    </Form.Group>\r\n                                                </Form.Row>\r\n\r\n                                                <Form.Row>\r\n                                                    <Col>\r\n                                                        <Form.Group>\r\n                                                            <Form.Label>\r\n                                                                Secondary\r\n                                                                Contact\r\n                                                            </Form.Label>\r\n                                                            <Form.Control\r\n                                                                type=\"text\"\r\n                                                                name=\"ownerSecContact\"\r\n                                                                placeholder=\"Owner's Secondary Contact Information\"\r\n                                                                value={\r\n                                                                    values.ownerSecContact\r\n                                                                }\r\n                                                                onChange={\r\n                                                                    handleChange\r\n                                                                }\r\n                                                            />\r\n                                                        </Form.Group>\r\n\r\n                                                        <Form.Group>\r\n                                                            <Form.Label>\r\n                                                                Special Note\r\n                                                            </Form.Label>\r\n                                                            <Form.Control\r\n                                                                as=\"textarea\"\r\n                                                                name=\"ownerNote\"\r\n                                                                value={\r\n                                                                    values.ownerNote\r\n                                                                }\r\n                                                                onChange={\r\n                                                                    handleChange\r\n                                                                }\r\n                                                            />\r\n                                                        </Form.Group>\r\n                                                    </Col>\r\n\r\n                                                    <Col>\r\n                                                        <Form.Group>\r\n                                                            <Form.Label>\r\n                                                                Additional\r\n                                                                Phones\r\n                                                            </Form.Label>\r\n                                                            <Form.Control\r\n                                                                type=\"phone\"\r\n                                                                name=\"ownerPhone3\"\r\n                                                                value={\r\n                                                                    values.ownerPhone3\r\n                                                                }\r\n                                                                onChange={\r\n                                                                    handleChange\r\n                                                                }\r\n                                                                onBlur={\r\n                                                                    handleBlur\r\n                                                                }\r\n                                                                isInvalid={\r\n                                                                    touched.ownerPhone3 &&\r\n                                                                    !!errors.ownerPhone3\r\n                                                                }\r\n                                                            />\r\n                                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                                {\r\n                                                                    errors.ownerPhone3\r\n                                                                }\r\n                                                            </Form.Control.Feedback>\r\n                                                        </Form.Group>\r\n\r\n                                                        <Form.Group>\r\n                                                            <Form.Control\r\n                                                                type=\"phone\"\r\n                                                                name=\"ownerPhone4\"\r\n                                                                value={\r\n                                                                    values.ownerPhone4\r\n                                                                }\r\n                                                                onChange={\r\n                                                                    handleChange\r\n                                                                }\r\n                                                                onBlur={\r\n                                                                    handleBlur\r\n                                                                }\r\n                                                                isInvalid={\r\n                                                                    touched.ownerPhone4 &&\r\n                                                                    !!errors.ownerPhone4\r\n                                                                }\r\n                                                            />\r\n                                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                                {\r\n                                                                    errors.ownerPhone4\r\n                                                                }\r\n                                                            </Form.Control.Feedback>\r\n                                                        </Form.Group>\r\n\r\n                                                        <Form.Group>\r\n                                                            <Form.Control\r\n                                                                type=\"phone\"\r\n                                                                name=\"ownerPhone5\"\r\n                                                                value={\r\n                                                                    values.ownerPhone5\r\n                                                                }\r\n                                                                onChange={\r\n                                                                    handleChange\r\n                                                                }\r\n                                                                onBlur={\r\n                                                                    handleBlur\r\n                                                                }\r\n                                                                isInvalid={\r\n                                                                    touched.ownerPhone5 &&\r\n                                                                    !!errors.ownerPhone5\r\n                                                                }\r\n                                                            />\r\n                                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                                {\r\n                                                                    errors.ownerPhone5\r\n                                                                }\r\n                                                            </Form.Control.Feedback>\r\n                                                        </Form.Group>\r\n\r\n                                                        <Form.Group>\r\n                                                            <Form.Control\r\n                                                                type=\"phone\"\r\n                                                                name=\"ownerPhone6\"\r\n                                                                value={\r\n                                                                    values.ownerPhone6\r\n                                                                }\r\n                                                                onChange={\r\n                                                                    handleChange\r\n                                                                }\r\n                                                                onBlur={\r\n                                                                    handleBlur\r\n                                                                }\r\n                                                                isInvalid={\r\n                                                                    touched.ownerPhone6 &&\r\n                                                                    !!errors.ownerPhone6\r\n                                                                }\r\n                                                            />\r\n                                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                                {\r\n                                                                    errors.ownerPhone6\r\n                                                                }\r\n                                                            </Form.Control.Feedback>\r\n                                                        </Form.Group>\r\n\r\n                                                        <Form.Group>\r\n                                                            <Form.Control\r\n                                                                type=\"phone\"\r\n                                                                name=\"ownerPhone7\"\r\n                                                                value={\r\n                                                                    values.ownerPhone7\r\n                                                                }\r\n                                                                onChange={\r\n                                                                    handleChange\r\n                                                                }\r\n                                                                onBlur={\r\n                                                                    handleBlur\r\n                                                                }\r\n                                                                isInvalid={\r\n                                                                    touched.ownerPhone7 &&\r\n                                                                    !!errors.ownerPhone7\r\n                                                                }\r\n                                                            />\r\n                                                            <Form.Control.Feedback type=\"invalid\">\r\n                                                                {\r\n                                                                    errors.ownerPhone7\r\n                                                                }\r\n                                                            </Form.Control.Feedback>\r\n                                                        </Form.Group>\r\n                                                    </Col>\r\n                                                </Form.Row>\r\n                                            </Card.Body>\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row className=\"mt-5\">\r\n                                    <Col>\r\n                                        <Button\r\n                                            className=\"float-right\"\r\n                                            variant=\"outline-secondary\"\r\n                                            onClick={this.onClickCancel}\r\n                                        >\r\n                                            Cancel\r\n                                        </Button>\r\n\r\n                                        <Button\r\n                                            className=\"float-right mr-2\"\r\n                                            variant=\"primary\"\r\n                                            type=\"submit\"\r\n                                            disabled={isSubmitting}\r\n                                        >\r\n                                            Register Owner\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                                {this.state.error !== \"\" && (\r\n                                    <Form.Text className=\"text-danger float-right pr-5\">\r\n                                        {this.state.error}\r\n                                    </Form.Text>\r\n                                )}\r\n                            </Container>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport const userGetListService = async () => {\r\n    try {\r\n        return await axios.get(`${window.$server_url}/users`);\r\n    } catch (err) {\r\n        return {\r\n            error: true,\r\n            errMsg: err.message,\r\n        };\r\n    }\r\n};\r\n\r\nexport const userGetService = async (_id) => {\r\n    try {\r\n        return await axios.get(`${window.$server_url}/users/${_id}`);\r\n    } catch (err) {\r\n        return {\r\n            error: true,\r\n            errMsg: err.message,\r\n        };\r\n    }\r\n};\r\n\r\nexport const userRegisterService = async (user) => {\r\n    try {\r\n        return await axios.post(`${window.$server_url}/users/add`, user);\r\n    } catch (err) {\r\n        return {\r\n            error: true,\r\n            errMsg: err.message,\r\n        };\r\n    }\r\n};\r\n\r\nexport const userDeleteService = async (_id) => {\r\n    try {\r\n        return await axios.delete(`${window.$server_url}/users/delete/${_id}`);\r\n    } catch (err) {\r\n        return {\r\n            error: true,\r\n            errMsg: err.message,\r\n        };\r\n    }\r\n};\r\n\r\nexport const userUpdateService = async (id, user) => {\r\n    try {\r\n        return await axios.patch(\r\n            `${window.$server_url}/users/edit/${id}`,\r\n            user\r\n        );\r\n    } catch (err) {\r\n        return {\r\n            error: true,\r\n            errMsg: err.message,\r\n        };\r\n    }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport { Container, Row } from \"react-bootstrap\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\n\r\nimport { userGetListService } from \"./../services/user.service\";\r\nimport {\r\n    verifyTokenAsync,\r\n    userLogoutAsync,\r\n} from \"../actions/auth-async.action\";\r\nimport { setAuthToken } from \"../services/auth.service\";\r\nimport { userDeleteService } from \"../services/user.service\";\r\n\r\nimport { MdPhoneForwarded } from \"react-icons/md\";\r\nimport { FaEnvelopeOpenText } from \"react-icons/fa\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\n\r\nexport default function UserList() {\r\n    /*\r\n     * Private Page Token Verification Module.\r\n     */\r\n    const auth_obj = useSelector((state) => state.auth);\r\n    const { token, expiredAt } = auth_obj;\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        setAuthToken(token);\r\n        const verifyTokenTimer = setTimeout(() => {\r\n            dispatch(verifyTokenAsync(true));\r\n        }, moment(expiredAt).diff() - 10 * 1000);\r\n        return () => {\r\n            clearTimeout(verifyTokenTimer);\r\n        };\r\n    }, [expiredAt, token, dispatch]);\r\n    /* ----------------------- */\r\n\r\n    const { userId } = auth_obj.user;\r\n    const { username } = auth_obj.user;\r\n    const [users, setUsers] = useState([]);\r\n    const [deleteError, setDeleteError] = useState(\"\");\r\n    const [pageLoading, setPageLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const result = await userGetListService();\r\n            if (result.error) {\r\n                dispatch(userLogoutAsync());\r\n            } else {\r\n                setUsers(result.data);\r\n            }\r\n            setPageLoading(false);\r\n        }\r\n        setPageLoading(true);\r\n        fetchData();\r\n    }, [dispatch]);\r\n\r\n    const handleDelete = (_id) => {\r\n        async function fetchData() {\r\n            const result = await userDeleteService(_id);\r\n            if (result.error) {\r\n                setDeleteError(result.errMsg);\r\n                setTimeout(() => {\r\n                    setDeleteError(\"\");\r\n                }, 3000);\r\n            } else {\r\n                setUsers(result.data);\r\n            }\r\n        }\r\n        fetchData();\r\n    };\r\n\r\n    const User = (props) => (\r\n        <tr>\r\n            <td>\r\n                <Link to={\"/users/edit/\" + props.user._id}>\r\n                    {props.user.name}\r\n                </Link>\r\n            </td>\r\n            <td>{props.user.email}</td>\r\n            <td>{props.user.phone}</td>\r\n            <td>{props.user.role}</td>\r\n            <td>\r\n                {username !== props.user.email && (\r\n                    <>\r\n                        <a href={\"tel:\" + props.user.phone}>\r\n                            <MdPhoneForwarded className=\"text-info mx-1\" />\r\n                        </a>{\" \"}\r\n                        <a href={\"mailto:\" + props.user.email}>\r\n                            <FaEnvelopeOpenText className=\"text-primary mx-1\" />\r\n                        </a>\r\n                    </>\r\n                )}\r\n                {!props.user.isAdmin && (\r\n                    <>\r\n                        <span onClick={() => handleDelete(props.user._id)}>\r\n                            {\" \"}\r\n                            <FaTrashAlt\r\n                                style={{ cursor: \"pointer\" }}\r\n                                className=\"text-danger mx-1\"\r\n                            />\r\n                        </span>\r\n                    </>\r\n                )}\r\n            </td>\r\n        </tr>\r\n    );\r\n\r\n    const userList = (users) => {\r\n        if (pageLoading) {\r\n            return (\r\n                <tr>\r\n                    <td>\r\n                        <Container\r\n                            className=\"py-5 text-center\"\r\n                            style={{ position: \"absolute\" }}\r\n                        >\r\n                            <ClipLoader\r\n                                css=\"margin: auto;\"\r\n                                size={100}\r\n                                color={\"#ff0000\"}\r\n                                loading={pageLoading}\r\n                            />\r\n                        </Container>\r\n                    </td>\r\n                </tr>\r\n            );\r\n        } else {\r\n            return users.map(function (user, index) {\r\n                if (user._id === userId) return null;\r\n                const replace_obj = {};\r\n\r\n                switch (user.role) {\r\n                    case \"admin\":\r\n                        replace_obj.role = \"STL Admin\";\r\n                        break;\r\n                    case \"rep\":\r\n                        replace_obj.role = \"STL Rep\";\r\n                        break;\r\n                    default:\r\n                        replace_obj.role = \"Vet Practice\";\r\n                        break;\r\n                }\r\n\r\n                return <User user={{ ...user, ...replace_obj }} key={index} />;\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h1 className=\"m-5 text-center\">All Portal Users</h1>\r\n\r\n                <Row>\r\n                    <Table responsive>\r\n                        <thead className=\"bg-success text-white\">\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <th>Email</th>\r\n                                <th>Phone</th>\r\n                                <th>Role</th>\r\n                                <th>Manage</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        <tbody>{userList(users)}</tbody>\r\n                    </Table>\r\n                </Row>\r\n\r\n                {deleteError !== \"\" && (\r\n                    <p className=\"float-right text-danger mx-4\">\r\n                        {deleteError}\r\n                    </p>\r\n                )}\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport moment from \"moment\";\r\n\r\nimport { Container, Row, Col, Card, Form, Button } from \"react-bootstrap\";\r\nimport Image from \"react-bootstrap/Image\";\r\n\r\nimport { verifyTokenAsync } from \"../actions/auth-async.action\";\r\nimport { setAuthToken } from \"../services/auth.service\";\r\nimport { useFormInput } from \"../utils/form-input.util\";\r\nimport { useFormCheck } from \"../utils/form-check.util\";\r\nimport { userRegisterService } from \"../services/user.service\";\r\n\r\nimport img from \"../assets/images/user-register.jpg\";\r\n\r\nexport default function UserRegister() {\r\n    /*\r\n     * Private Page Token Verification Module.\r\n     */\r\n    const auth_obj = useSelector((state) => state.auth);\r\n    const { token, expiredAt } = auth_obj;\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        setAuthToken(token);\r\n        const verifyTokenTimer = setTimeout(() => {\r\n            dispatch(verifyTokenAsync(true));\r\n        }, moment(expiredAt).diff() - 10 * 1000);\r\n        return () => {\r\n            clearTimeout(verifyTokenTimer);\r\n        };\r\n    }, [expiredAt, token, dispatch]);\r\n    /* ----------------------- */\r\n\r\n    const role = useFormCheck(\"vet\");\r\n    const name = useFormInput(\"\");\r\n    const email = useFormInput(\"\");\r\n    const phone = useFormInput(\"\");\r\n    const password = useFormInput(\"\");\r\n    const password_confirm = useFormInput(\"\");\r\n\r\n    const history = useHistory();\r\n    const [formError, setFormError] = useState(\"\");\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (password.value === password_confirm.value) {\r\n            async function fetchData() {\r\n                const newUser = {\r\n                    role: role.selected,\r\n                    email: email.value,\r\n                    phone: phone.value,\r\n                    name: name.value,\r\n                    password: password.value,\r\n                };\r\n                newUser.isAdmin = newUser.role === \"admin\" ? true : false;\r\n                const result = await userRegisterService(newUser);\r\n                if (result.error) {\r\n                    setFormError(result.errMsg);\r\n                } else {\r\n                    history.push(\"/users\");\r\n                }\r\n            }\r\n            fetchData();\r\n        } else {\r\n            setFormError(\"Password do not match\");\r\n        }\r\n    };\r\n\r\n    const handleCancel = (e) => {\r\n        e.preventDefault();\r\n        history.push(\"/users\");\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h1 className=\"m-5 text-center\">Add A New Portal User</h1>\r\n\r\n                <Form autoComplete=\"off\">\r\n                    <Row>\r\n                        <Col className=\"align-self-center\">\r\n                            <Image src={img} roundedCircle width=\"90%\" />\r\n                        </Col>\r\n                        <Col>\r\n                            <Card className=\"shadow\">\r\n                                <Card.Header className=\"bg-success text-white\">\r\n                                    <h5 className=\"m-0\">User Information</h5>\r\n                                </Card.Header>\r\n\r\n                                <Card.Body>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Role</Form.Label>\r\n                                        <Col className=\"p-0\">\r\n                                            <Form.Check\r\n                                                inline\r\n                                                className=\"mr-5\"\r\n                                                type=\"radio\"\r\n                                                name=\"role\"\r\n                                                value=\"admin\"\r\n                                                label=\"STL Admin\"\r\n                                                checked={\r\n                                                    role.selected === \"admin\"\r\n                                                }\r\n                                                {...role}\r\n                                            />\r\n                                            <Form.Check\r\n                                                inline\r\n                                                className=\"mr-5\"\r\n                                                type=\"radio\"\r\n                                                name=\"role\"\r\n                                                value=\"rep\"\r\n                                                checked={\r\n                                                    role.selected === \"rep\"\r\n                                                }\r\n                                                label=\"STL Representation\"\r\n                                                {...role}\r\n                                            />\r\n                                            <Form.Check\r\n                                                inline\r\n                                                className=\"mr-5\"\r\n                                                type=\"radio\"\r\n                                                name=\"role\"\r\n                                                value=\"vet\"\r\n                                                label=\"Vet Practice\"\r\n                                                checked={\r\n                                                    role.selected === \"vet\"\r\n                                                }\r\n                                                {...role}\r\n                                            />\r\n                                        </Col>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group>\r\n                                        <Form.Label>Name</Form.Label>\r\n                                        <Form.Control\r\n                                            id=\"userName\"\r\n                                            type=\"text\"\r\n                                            {...name}\r\n                                            placeholder=\"Enter Full Name\"\r\n                                        />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group>\r\n                                        <Form.Label>Email</Form.Label>\r\n                                        <Form.Control\r\n                                            id=\"userEmail\"\r\n                                            type=\"email\"\r\n                                            {...email}\r\n                                            placeholder=\"Enter Email Address\"\r\n                                        />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group>\r\n                                        <Form.Label>Phone</Form.Label>\r\n                                        <Form.Control\r\n                                            id=\"userPhone\"\r\n                                            type=\"text\"\r\n                                            {...phone}\r\n                                            placeholder=\"Enter Phone Number\"\r\n                                        />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group>\r\n                                        <Form.Label>Password</Form.Label>\r\n                                        <Form.Control\r\n                                            id=\"userPass\"\r\n                                            type=\"password\"\r\n                                            {...password}\r\n                                            placeholder=\"Enter Password\"\r\n                                        />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group>\r\n                                        <Form.Label>\r\n                                            Confirm Password\r\n                                        </Form.Label>\r\n                                        <Form.Control\r\n                                            id=\"userPassConfirm\"\r\n                                            type=\"password\"\r\n                                            {...password_confirm}\r\n                                            placeholder=\"Enter Password Again\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col>\r\n                            <Button\r\n                                className=\"float-right mt-5\"\r\n                                variant=\"outline-secondary\"\r\n                                onClick={handleCancel}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n\r\n                            <Button\r\n                                className=\"float-right mr-2 mt-5\"\r\n                                variant=\"primary\"\r\n                                onClick={handleSubmit}\r\n                            >\r\n                                Add User\r\n                            </Button>\r\n\r\n                            {formError && (\r\n                                <Form.Text className=\"text-danger float-right mr-4\">\r\n                                    {formError}\r\n                                </Form.Text>\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport moment from \"moment\";\r\n\r\nimport { Container, Row, Col, Card, Form, Button } from \"react-bootstrap\";\r\nimport Image from \"react-bootstrap/Image\";\r\n\r\nimport {\r\n    verifyTokenAsync,\r\n    userLogoutAsync,\r\n} from \"../actions/auth-async.action\";\r\nimport { setAuthToken } from \"../services/auth.service\";\r\nimport { useFormInput } from \"../utils/form-input.util\";\r\nimport { useFormCheck } from \"../utils/form-check.util\";\r\nimport { userGetService, userUpdateService } from \"../services/user.service\";\r\n\r\nimport img from \"../assets/images/user-register.jpg\";\r\n\r\nexport default function UserEdit() {\r\n    /*\r\n     * Private Page Token Verification Module.\r\n     */\r\n    const auth_obj = useSelector((state) => state.auth);\r\n    const { token, expiredAt } = auth_obj;\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        setAuthToken(token);\r\n        const verifyTokenTimer = setTimeout(() => {\r\n            dispatch(verifyTokenAsync(true));\r\n        }, moment(expiredAt).diff() - 10 * 1000);\r\n        return () => {\r\n            clearTimeout(verifyTokenTimer);\r\n        };\r\n    }, [expiredAt, token, dispatch]);\r\n    /* ----------------------- */\r\n\r\n    const { id } = useParams();\r\n    const { userId } = auth_obj.user;\r\n    const history = useHistory();\r\n    const [formError, setFormError] = useState(\"\");\r\n    const [user, setUser] = useState({\r\n        role: \"\",\r\n        name: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n    });\r\n\r\n    const role = useFormCheck(user.role);\r\n    const name = useFormInput(user.name);\r\n    const email = useFormInput(user.email);\r\n    const phone = useFormInput(user.phone);\r\n    const pass = useFormInput(\"\");\r\n    const pass_confirm = useFormInput(\"\");\r\n\r\n    useEffect(() => {\r\n        async function getData() {\r\n            const result = await userGetService(id);\r\n            if (result.error) {\r\n                dispatch(userLogoutAsync());\r\n            } else {\r\n                console.log(result.data);\r\n                setUser(result.data);\r\n            }\r\n        }\r\n        getData();\r\n    }, [dispatch, id, setUser]);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        async function fetchData() {\r\n            let updateUser = {};\r\n            if (pass.value !== pass_confirm.value) {\r\n                setFormError(\"Re-enter the passwords!\");\r\n            } else {\r\n                if (id === userId) {\r\n                    updateUser = {\r\n                        role: user.role,\r\n                        email: email.value,\r\n                        phone: phone.value,\r\n                        name: name.value,\r\n                        password: pass.value,\r\n                    };\r\n                } else {\r\n                    updateUser = {\r\n                        role: role.selected,\r\n                        email: email.value,\r\n                        phone: phone.value,\r\n                        name: name.value,\r\n                        password: pass.value,\r\n                    };\r\n                }\r\n            }\r\n\r\n            updateUser.isAdmin = updateUser.role === \"admin\" ? true : false;\r\n            const result = await userUpdateService(id, updateUser);\r\n            if (result.error) {\r\n                setFormError(result.errMsg);\r\n            } else {\r\n                history.push(\"/users\");\r\n            }\r\n        }\r\n        fetchData();\r\n    };\r\n\r\n    const handleCancel = (e) => {\r\n        e.preventDefault();\r\n        history.push(\"/users\");\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                {userId === id && (\r\n                    <h1 className=\"m-5 text-center\">My Profile</h1>\r\n                )}\r\n                {userId !== id && (\r\n                    <h1 className=\"m-5 text-center\">Edit User</h1>\r\n                )}\r\n\r\n                <Form autoComplete=\"off\">\r\n                    <Row>\r\n                        <Col className=\"align-self-center\">\r\n                            <Image src={img} roundedCircle width=\"90%\" />\r\n                        </Col>\r\n                        <Col>\r\n                            <Card className=\"shadow\">\r\n                                <Card.Header className=\"bg-success text-white\">\r\n                                    <h5 className=\"m-0\">User Information</h5>\r\n                                </Card.Header>\r\n\r\n                                <Card.Body>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Role</Form.Label>\r\n                                        <Col className=\"p-0\">\r\n                                            <Form.Check\r\n                                                inline\r\n                                                className=\"mr-5\"\r\n                                                type=\"radio\"\r\n                                                name=\"role\"\r\n                                                value=\"admin\"\r\n                                                label=\"STL Admin\"\r\n                                                checked={\r\n                                                    role.selected === \"admin\"\r\n                                                }\r\n                                                {...role}\r\n                                                disabled={userId === id}\r\n                                            />\r\n                                            <Form.Check\r\n                                                inline\r\n                                                className=\"mr-5\"\r\n                                                type=\"radio\"\r\n                                                name=\"role\"\r\n                                                value=\"rep\"\r\n                                                checked={\r\n                                                    role.selected === \"rep\"\r\n                                                }\r\n                                                label=\"STL Representation\"\r\n                                                {...role}\r\n                                                disabled={userId === id}\r\n                                            />\r\n                                            <Form.Check\r\n                                                inline\r\n                                                className=\"mr-5\"\r\n                                                type=\"radio\"\r\n                                                name=\"role\"\r\n                                                value=\"vet\"\r\n                                                label=\"Vet Practice\"\r\n                                                checked={\r\n                                                    role.selected === \"vet\"\r\n                                                }\r\n                                                {...role}\r\n                                                disabled={userId === id}\r\n                                            />\r\n                                        </Col>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group>\r\n                                        <Form.Label>Name</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            {...name}\r\n                                            placeholder=\"Enter Full Name\"\r\n                                        />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group>\r\n                                        <Form.Label>Email</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"email\"\r\n                                            {...email}\r\n                                            placeholder=\"Enter Email Address\"\r\n                                        />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group>\r\n                                        <Form.Label>Phone</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            {...phone}\r\n                                            placeholder=\"Enter Phone Number\"\r\n                                        />\r\n                                    </Form.Group>\r\n\r\n                                    {id === userId && (\r\n                                        <>\r\n                                            <Form.Group>\r\n                                                <Form.Label>\r\n                                                    Password\r\n                                                </Form.Label>\r\n                                                <Form.Control\r\n                                                    type=\"password\"\r\n                                                    {...pass}\r\n                                                    placeholder=\"Enter Password\"\r\n                                                />\r\n                                            </Form.Group>\r\n\r\n                                            <Form.Group>\r\n                                                <Form.Label>\r\n                                                    Confirm Password\r\n                                                </Form.Label>\r\n                                                <Form.Control\r\n                                                    type=\"password\"\r\n                                                    {...pass_confirm}\r\n                                                    placeholder=\"Enter Password Again\"\r\n                                                />\r\n                                            </Form.Group>\r\n                                        </>\r\n                                    )}\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col>\r\n                            <Button\r\n                                className=\"float-right mt-5\"\r\n                                variant=\"outline-secondary\"\r\n                                onClick={handleCancel}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n\r\n                            <Button\r\n                                className=\"float-right mr-2 mt-5\"\r\n                                variant=\"primary\"\r\n                                onClick={handleSubmit}\r\n                            >\r\n                                Update\r\n                            </Button>\r\n\r\n                            {formError && (\r\n                                <Form.Text className=\"text-danger float-right mr-4\">\r\n                                    {formError}\r\n                                </Form.Text>\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport moment from \"moment\";\r\n\r\nimport { Container, Row, Col, Card, Form, Button } from \"react-bootstrap\";\r\nimport Image from \"react-bootstrap/Image\";\r\n\r\nimport {\r\n    verifyTokenAsync,\r\n    userLogoutAsync,\r\n} from \"../actions/auth-async.action\";\r\nimport { setAuthToken } from \"../services/auth.service\";\r\nimport { useFormInput } from \"../utils/form-input.util\";\r\nimport { useFormCheck } from \"../utils/form-check.util\";\r\nimport { userGetService, userUpdateService } from \"../services/user.service\";\r\n\r\nimport img from \"../assets/images/user-register.jpg\";\r\n\r\nexport default function UserEdit() {\r\n    /*\r\n     * Private Page Token Verification Module.\r\n     */\r\n    const auth_obj = useSelector((state) => state.auth);\r\n    const { token, expiredAt } = auth_obj;\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        setAuthToken(token);\r\n        const verifyTokenTimer = setTimeout(() => {\r\n            dispatch(verifyTokenAsync(true));\r\n        }, moment(expiredAt).diff() - 10 * 1000);\r\n        return () => {\r\n            clearTimeout(verifyTokenTimer);\r\n        };\r\n    }, [expiredAt, token, dispatch]);\r\n    /* ----------------------- */\r\n\r\n    const { userId } = auth_obj.user;\r\n    const history = useHistory();\r\n    const [formError, setFormError] = useState(\"\");\r\n    const [user, setUser] = useState({\r\n        role: \"\",\r\n        name: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n    });\r\n\r\n    const role = useFormCheck(user.role);\r\n    const name = useFormInput(user.name);\r\n    const email = useFormInput(user.email);\r\n    const phone = useFormInput(user.phone);\r\n    const pass = useFormInput(\"\");\r\n    const pass_confirm = useFormInput(\"\");\r\n\r\n    useEffect(() => {\r\n        async function getData() {\r\n            const result = await userGetService(userId);\r\n            if (result.error) {\r\n                dispatch(userLogoutAsync());\r\n            } else {\r\n                console.log(result.data);\r\n                setUser(result.data);\r\n            }\r\n        }\r\n        getData();\r\n    }, [dispatch, userId, setUser]);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        async function fetchData() {\r\n            let updateUser = {};\r\n            if (pass.value !== pass_confirm.value) {\r\n                setFormError(\"Re-enter the passwords!\");\r\n            } else {\r\n                updateUser = {\r\n                    role: user.role,\r\n                    email: email.value,\r\n                    phone: phone.value,\r\n                    name: name.value,\r\n                    password: pass.value,\r\n                };\r\n            }\r\n\r\n            updateUser.isAdmin = updateUser.role === \"admin\" ? true : false;\r\n            const result = await userUpdateService(userId, updateUser);\r\n            if (result.error) {\r\n                setFormError(result.errMsg);\r\n            } else {\r\n                history.push(\"/users\");\r\n            }\r\n        }\r\n        fetchData();\r\n    };\r\n\r\n    const handleCancel = (e) => {\r\n        e.preventDefault();\r\n        history.push(\"/users\");\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Container>\r\n                <h1 className=\"m-5 text-center\">My Profile</h1>\r\n\r\n                <Form autoComplete=\"off\">\r\n                    <Row>\r\n                        <Col className=\"align-self-center\">\r\n                            <Image src={img} roundedCircle width=\"90%\" />\r\n                        </Col>\r\n                        <Col>\r\n                            <Card className=\"shadow\">\r\n                                <Card.Header className=\"bg-success text-white\">\r\n                                    <h5 className=\"m-0\">User Information</h5>\r\n                                </Card.Header>\r\n\r\n                                <Card.Body>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Role</Form.Label>\r\n                                        <Col className=\"p-0\">\r\n                                            <Form.Check\r\n                                                inline\r\n                                                className=\"mr-5\"\r\n                                                type=\"radio\"\r\n                                                name=\"role\"\r\n                                                value=\"admin\"\r\n                                                label=\"STL Admin\"\r\n                                                checked={\r\n                                                    role.selected === \"admin\"\r\n                                                }\r\n                                                {...role}\r\n                                                disabled={true}\r\n                                            />\r\n                                            <Form.Check\r\n                                                inline\r\n                                                className=\"mr-5\"\r\n                                                type=\"radio\"\r\n                                                name=\"role\"\r\n                                                value=\"rep\"\r\n                                                checked={\r\n                                                    role.selected === \"rep\"\r\n                                                }\r\n                                                label=\"STL Representation\"\r\n                                                {...role}\r\n                                                disabled={true}\r\n                                            />\r\n                                            <Form.Check\r\n                                                inline\r\n                                                className=\"mr-5\"\r\n                                                type=\"radio\"\r\n                                                name=\"role\"\r\n                                                value=\"vet\"\r\n                                                label=\"Vet Practice\"\r\n                                                checked={\r\n                                                    role.selected === \"vet\"\r\n                                                }\r\n                                                {...role}\r\n                                                disabled={true}\r\n                                            />\r\n                                        </Col>\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group>\r\n                                        <Form.Label>Name</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            {...name}\r\n                                            placeholder=\"Enter Full Name\"\r\n                                        />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group>\r\n                                        <Form.Label>Email</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"email\"\r\n                                            {...email}\r\n                                            placeholder=\"Enter Email Address\"\r\n                                        />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group>\r\n                                        <Form.Label>Phone</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"text\"\r\n                                            {...phone}\r\n                                            placeholder=\"Enter Phone Number\"\r\n                                        />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group>\r\n                                        <Form.Label>Password</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"password\"\r\n                                            {...pass}\r\n                                            placeholder=\"Enter Password\"\r\n                                        />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group>\r\n                                        <Form.Label>\r\n                                            Confirm Password\r\n                                        </Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"password\"\r\n                                            {...pass_confirm}\r\n                                            placeholder=\"Enter Password Again\"\r\n                                        />\r\n                                    </Form.Group>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col>\r\n                            <Button\r\n                                className=\"float-right mt-5\"\r\n                                variant=\"outline-secondary\"\r\n                                onClick={handleCancel}\r\n                            >\r\n                                Cancel\r\n                            </Button>\r\n\r\n                            <Button\r\n                                className=\"float-right mr-2 mt-5\"\r\n                                variant=\"primary\"\r\n                                onClick={handleSubmit}\r\n                            >\r\n                                Update\r\n                            </Button>\r\n\r\n                            {formError && (\r\n                                <Form.Text className=\"text-danger float-right mr-4\">\r\n                                    {formError}\r\n                                </Form.Text>\r\n                            )}\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Report() {\r\n    return (\r\n        <>\r\n\r\n        </>\r\n    );\r\n}","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nimport { Container, Row, Col, Button, Form, Card } from \"react-bootstrap\";\r\nimport logo from \"./../assets/logo.png\";\r\n\r\nimport { userLoginAsync } from \"../actions/auth-async.action\";\r\nimport { useFormInput } from \"../utils/form-input.util\";\r\n\r\nexport default function AccountLogin() {\r\n    const auth_obj = useSelector((state) => state.auth);\r\n    const dispatch = useDispatch();\r\n\r\n    const { loginLoading, loginError } = auth_obj;\r\n\r\n    const email = useFormInput(\"\");\r\n    const password = useFormInput(\"\");\r\n\r\n    const handleLogin = () => {\r\n        if (email.value !== \"\" && password.value !== \"\")\r\n            dispatch(userLoginAsync(email.value, password.value));\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <Row className=\"justify-content-md-center min-vh-100\">\r\n                <Card className=\"shadow w-50 my-auto\">\r\n                    <Card.Header className=\"bg-danger text-white\">\r\n                        <h3 className=\"m-0 text-center\">\r\n                            Save This Life Admin Portal\r\n                        </h3>\r\n                    </Card.Header>\r\n\r\n                    <Card.Body>\r\n                        <Row>\r\n                            <Col className=\"my-auto\">\r\n                                <Card.Img\r\n                                    variant=\"left\"\r\n                                    className=\"w-100\"\r\n                                    src={logo}\r\n                                />\r\n                            </Col>\r\n\r\n                            <Col>\r\n                                <Card.Title>Login Information</Card.Title>\r\n                                <Card.Text>\r\n                                    Please request Heather the login credentials\r\n                                    if you are a identified Vet Practice.\r\n                                </Card.Text>\r\n                                <Form>\r\n                                    <Form.Group>\r\n                                        <Form.Label>Email address</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"email\"\r\n                                            {...email}\r\n                                            placeholder=\"Enter email\"\r\n                                        />\r\n                                    </Form.Group>\r\n\r\n                                    <Form.Group>\r\n                                        <Form.Label>Password</Form.Label>\r\n                                        <Form.Control\r\n                                            type=\"password\"\r\n                                            {...password}\r\n                                            placeholder=\"Enter Password\"\r\n                                        />\r\n                                    </Form.Group>\r\n\r\n                                    <Button\r\n                                        type=\"submit\"\r\n                                        variant=\"outline-info\"\r\n                                        onClick={handleLogin}\r\n                                        disabled={loginLoading}\r\n                                    >\r\n                                        {loginLoading ? \"Loading...\" : \"Login\"}\r\n                                    </Button>\r\n                                    {loginError && (\r\n                                        <Form.Text className=\"text-danger\">\r\n                                            {loginError}\r\n                                        </Form.Text>\r\n                                    )}\r\n                                </Form>\r\n                            </Col>\r\n                        </Row>\r\n                    </Card.Body>\r\n                </Card>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { BrowserRouter as Router, Switch, Redirect } from \"react-router-dom\";\r\n\r\nimport Header from \"../utils/header.util\";\r\nimport PrivateRoute from \"../routes/private.route\";\r\nimport PublicRoute from \"../routes/public.route\";\r\nimport Footer from \"../utils/footer.util\";\r\nimport Dashboard from \"../pages/dashboard.page\";\r\nimport PetList from \"../pages/pet-list.page\";\r\nimport PetEdit from \"../pages/pet-edit.page\";\r\nimport PetRegister from \"../pages/pet-register.page\";\r\nimport OwnerList from \"../pages/owner-list.page\";\r\nimport OwnerEdit from \"../pages/owner-edit.page\";\r\nimport OwnerRegister from \"../pages/owner-register.page\";\r\nimport UserList from \"../pages/user-list.page\";\r\nimport UserRegister from \"../pages/user-register.page\";\r\nimport UserEdit from \"../pages/user-edit.page\";\r\nimport Setting from \"../pages/setting.page\";\r\nimport Report from \"../pages/report.page\";\r\nimport AccountLogin from \"../pages/login.page\";\r\n\r\nexport default function STLRouter() {\r\n    const auth_obj = useSelector((state) => state.auth);\r\n\r\n    const { isAuthenticated } = auth_obj;\r\n    const { isAdmin } = auth_obj.user !== null ? auth_obj.user : false;\r\n\r\n    return (\r\n        <Router>\r\n            <div>\r\n                {isAuthenticated && <Header />}\r\n\r\n                <main>\r\n                    <Switch>\r\n                        <PrivateRoute\r\n                            path=\"/\"\r\n                            exact\r\n                            component={Dashboard}\r\n                            isAuthenticated={isAuthenticated}\r\n                        />\r\n\r\n                        <PrivateRoute\r\n                            path=\"/pets\"\r\n                            exact\r\n                            component={PetList}\r\n                            isAuthenticated={isAuthenticated}\r\n                        />\r\n                        <PrivateRoute\r\n                            path=\"/pets/edit/:id\"\r\n                            exact\r\n                            component={PetEdit}\r\n                            isAuthenticated={isAuthenticated}\r\n                        />\r\n                        <PrivateRoute\r\n                            path=\"/pets/register\"\r\n                            exact\r\n                            component={PetRegister}\r\n                            isAuthenticated={isAuthenticated}\r\n                        />\r\n\r\n                        <PrivateRoute\r\n                            path=\"/owners\"\r\n                            exact\r\n                            component={OwnerList}\r\n                            isAuthenticated={isAuthenticated}\r\n                        />\r\n                        <PrivateRoute\r\n                            path=\"/owners/edit/:id\"\r\n                            exact\r\n                            component={OwnerEdit}\r\n                            isAuthenticated={isAuthenticated}\r\n                        />\r\n                        <PrivateRoute\r\n                            path=\"/owners/register\"\r\n                            exact\r\n                            component={OwnerRegister}\r\n                            isAuthenticated={isAuthenticated}\r\n                        />\r\n\r\n                        <PrivateRoute\r\n                            path=\"/users\"\r\n                            exact\r\n                            component={UserList}\r\n                            isAuthenticated={isAuthenticated}\r\n                            isAdmin={isAdmin}\r\n                        />\r\n                        <PrivateRoute\r\n                            path=\"/users/add\"\r\n                            exact\r\n                            component={UserRegister}\r\n                            isAuthenticated={isAuthenticated}\r\n                            isAdmin={isAdmin}\r\n                        />\r\n                        <PrivateRoute\r\n                            path=\"/users/edit/:id\"\r\n                            exact\r\n                            component={UserEdit}\r\n                            isAuthenticated={isAuthenticated}\r\n                            isAdmin={isAdmin}\r\n                        />\r\n\r\n                        <PrivateRoute\r\n                            path=\"/setting\"\r\n                            exact\r\n                            component={Setting}\r\n                            isAuthenticated={isAuthenticated}\r\n                        />\r\n\r\n                        <PrivateRoute\r\n                            path=\"/report\"\r\n                            exact\r\n                            component={Report}\r\n                            isAuthenticated={isAuthenticated}\r\n                            isAdmin={isAdmin}\r\n                        />\r\n\r\n                        <PublicRoute\r\n                            path=\"/login\"\r\n                            component={AccountLogin}\r\n                            isAuthenticated={isAuthenticated}\r\n                        />\r\n\r\n                        <Redirect to={isAuthenticated ? \"/\" : \"/login\"} />\r\n                    </Switch>\r\n                </main>\r\n            </div>\r\n            {isAuthenticated && <Footer />}\r\n        </Router>\r\n    );\r\n}\r\n","import React, { useEffect } from \"react\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n\nimport \"./assets/css/App.css\";\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nimport STLRouter from \"./routes/router\";\nimport { verifyTokenAsync } from \"./actions/auth-async.action\";\nimport { Row } from \"react-bootstrap\";\n\nexport default function App() {\n    const auth_obj = useSelector((state) => state.auth);\n    const dispatch = useDispatch();\n\n    const { authLoading } = auth_obj;\n\n    useEffect(() => {\n        dispatch(verifyTokenAsync());\n    }, [dispatch]);\n\n    if (authLoading) {\n        return (\n            <Row className=\"vh-100\">\n                <ClipLoader\n                    css=\"margin: auto;\"\n                    size={100}\n                    color={\"#ff0000\"}\n                    loading={authLoading}\n                />\n            </Row>\n        );\n    }\n    return <STLRouter />;\n}\n","import {\r\n    VERIFY_TOKEN_STARTED, VERIFY_TOKEN_END, USER_LOGIN_STARTED, USER_LOGIN_FAILURE, VERIFY_USER_SUCCESS, USER_LOGOUT\r\n} from \"../actions/env.action\";\r\n\r\n// define initial state of auth reducer\r\nconst initialState = {\r\n    token: null, // manage the access token\r\n    expiredAt: null, // manage expiry time of the access token\r\n    user: null, // manage the user details\r\n    authLoading: true, // to indicate that the auth API is in progress\r\n    isAuthenticated: false, // consider as a authentication flag\r\n    loginLoading: false, // to indicate that the user signin API is in progress\r\n    loginError: null // manage the error of the user signin API\r\n}\r\n\r\n// update store based on type and payload and return the state\r\nconst auth = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        // verify token - started\r\n        case VERIFY_TOKEN_STARTED:\r\n            const { silentAuth } = action.payload;\r\n            return silentAuth ? {\r\n                ...state\r\n            } : initialState;\r\n        // verify token - ended/failed\r\n        case VERIFY_TOKEN_END:\r\n            return {\r\n                ...state,\r\n                authLoading: false\r\n            };\r\n        // user login - started\r\n        case USER_LOGIN_STARTED:\r\n            return {\r\n                ...state,\r\n                loginLoading: true\r\n            };\r\n        // user login - ended/failed\r\n        case USER_LOGIN_FAILURE:\r\n            const { error } = action.payload;\r\n            return {\r\n                ...state,\r\n                loginError: error,\r\n                loginLoading: false\r\n            };\r\n        // verify token - success\r\n        case VERIFY_USER_SUCCESS:\r\n            const { token, expiredAt, user } = action.payload;\r\n            return {\r\n                ...state,\r\n                token,\r\n                expiredAt,\r\n                user,\r\n                isAuthenticated: true,\r\n                authLoading: false,\r\n                loginLoading: false\r\n            }\r\n        // handle user logout\r\n        case USER_LOGOUT:\r\n            return {\r\n                ...initialState,\r\n                authLoading: false\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default auth;","import { combineReducers } from 'redux';\r\nimport auth from './auth.reducer';\r\n\r\n// to combine all reducers together\r\nconst appReducer = combineReducers({\r\n    auth\r\n});\r\n\r\nexport default appReducer;","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport appReducer from './reducers';\r\n\r\nconst composeEnhancers =\r\n    typeof window === 'object' &&\r\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\r\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n            // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n        }) : compose;\r\n\r\nconst enhancer = composeEnhancers(\r\n    applyMiddleware(thunk),\r\n    // other store enhancers if any\r\n);\r\n\r\nexport default createStore(\r\n    appReducer, enhancer\r\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./App\";\nimport Store from \"./store\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./assets/css/index.css\";\n\nwindow.$server_url = \"http://localhost:8080\"; // For Development\n// window.$server_url = \"https://kandykoi.com:8443\"; // For Production\n\nReactDOM.render(\n    <Provider store={Store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/nophoto.0f35df8a.png\";"],"sourceRoot":""}